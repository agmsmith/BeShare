
This file contains the version history/change log for this software.

key:  - new feature
      * bug fixed
      o other

v3.20 Released 3/20/2006
  - Added SetGlobalQueryFilterFactory() and GetGlobalQueryFilterFactory()
    calls, so that it is possible for MUSCLE-based servers to install
    their own custom QueryFilterFactory objects if desired.
  o Moved the DataNode class out into its own file, DataNode.{cpp,h}.
    It is no longer an inner class of the StorageReflectSession class.
  o All QueryFilter::Matches() methods now take a DataNode pointer 
    as their second argument.  None of the built-in QueryFilter subclasses
    use this value, but it is available so that custom QueryFilters can
    use DataNode information in their matching decisions if necessary. 
  o Renamed InstantiateQueryFilter() to CreateQueryFilter(), and
    made it a virtual method in the new QueryFilterFactory class,
    instead of a global function.
  * Added serialization to muscleAlloc()/muscleRealloc()/muscleFree(),
    to avoid potential race conditions in multithreaded programs that 
    have memory-usage-tracking enabled.
  * Fixed a bug in the Java receive code that could cause a 
    parse error and subsequent disconnect if the Message stream
    was uncompressed (DEFAULT_MESSAGE_ENCODING) and a large
    Message was followed by a small one.
  * Fixed a typo in the java/build.xml file.
  * Rewrote MusclePowerPCSwapDouble() and MuscleX86SwapDouble()
    to use unions instead of C-style casting.  Doing it this way
    makes them more readable and avoids errors due to uncontrolled
    interactions with g++'s optimizer.
  * Made the testendian test program a little more robust.
    
v3.11 Released 3/1/2006
  - Added a testsysteminfo.cpp test to the test folder, to test
    the functions in the SystemInfo.{cpp,h} files.
  - Merged in Lior Okman's updates to the muscle Java classes so that
    they now support the new, more efficient java.nio.* interfaces.
    Note that this means that the Java API now requires Java 1.4.0
    or higher; let me know if that is a problem for you.
  - Added zlib/ZipFileUtilityFunctions.{cpp,h}, which contain functions 
    that create a .zip file from a MUSCLE Message, and vice versa.
    Also added a testzip.cpp program to the test folder to test them.
  - Added a more convenient Inet_NtoA(uint32) function (that returns
    a String) to MiscUtilityFunctions.{cpp,h}
  o Optimized TCPSocketDataIO::FlushOutput() slightly under Linux.
  * Merged in Lior Okman's AMD-64 compatibility patch.
  * Patched NetworkUtilityFunctions.cpp to handle net_length_t 
    properly under *BSD.

v3.10 Released 1/16/2006
  - Added the JCraft JZLib code to the included Java code tree, so that
    the MUSCLE Java code can again be compiled as provided.
  - Added a hashCode() method to the Java com.lcs.muscle.support.Point class.
  - Added NybbleizeData() and DenybbleizeData() convenience functions
    to MiscUtilityFunctions.{cpp,h}.
  - Added GetFirstKey(), GetFirstValue(), GetLastKey(), and GetLastValue()
    utility methods to the Hashtable class.
  - Added a HTIT_FLAG_NOREGISTER flag to the HashtableIterator class
    that (when specified) will prevent the HashtableIterator from registering
    itself with the Hashtable.  This option allows you to do a 100% 
    thread-safe Hashtable iteration, at the expense of requiring you to 
    guarantee that the Hashtable won't be modified during the traversal.
  - Added a HasItems() convenience method to the Queue and Hashtable classes.
    This method returns true iff there is at least one item present in
    the object (i.e. it is the logical negation of the IsEmpty() method)
  - Added a HasNames() convenience method to the Message class.  This method
    returns true if the Message contains any fields.
  o Removed the Flattenable::CopyToImplementation() methods since they were
    redundant.  Instead, CopyTo() just calls CopyFromImplementation() with
    the arguments reversed.
  o Replaced the boolean (backwards) argument for HashtableIterators with a
    uint32 (flags) argument.  Currently supported flags are 
    HTIT_FLAG_BACKWARDS (same as backwards=true in older versions) and
    the new HTIT_FLAG_NOREGISTER (see above for details)
  o Inlined some trivial one-liner methods in the Message class, for efficiency.
  * Merged in Eli "Scanty" Dayan's portability fixes so that the
    code again compiles properly under Solaris.  Thanks Scanty!
  * const methods in the Message class are now properly thread-safe 
    (provided the Message object isn't altered by any other threads 
    during their execution), thanks to the use of the 
    HTIT_FLAG_NOREGISTER flag.
  * The math used in the MUSCLE_POWERPC_TIMEBASE_HZ implementation of
    GetRunTime64() would overflow after a week or two of uptime,
    causing GetRunTime64() to return incorrect results.  Fixed.
  * PythonUtilityFunctions.cpp now compiles correctly under MacOS/X Tiger.
  * Tweaked MuscleSupport.h so that MacOS/X will properly use the 
    x86 assembly language functions when running on an Intel-based system.

v3.03 Released 10/10/2005
  - Added a GetLocalIPAddress() function to NetworkUtilityFunctions.{cpp,h}.
    This function returns the IP address(es) of the machine it is running on.
  - Refactored the ThreadWorkerSessionFactory::CreateSession() method out 
    into two methods:  CreateSession() and CreateThreadWorkerSession().  That 
    way subclasses can override CreateThreadWorkerSession() but still take 
    advantage of the session-accepted-notification functionality present 
    in CreateSession().
  - MessageTransceiverThread now identifies sessions via their root node
    path instead of just their session ID. (e.g. "/192.168.0.5/17", not "17")
  - Added David Grossman's -DMUSCLE_PREFER_QT_OVER_WIN32 patch, so that you
    can choose at compile time whether Muscle should prefer to use Win32 or 
    Qt APIs for its threading/synchronization mechanisms.
  - Added the 'cvscopy' utility program to the test folder.
  * GetPeerIPAddress() and GetHostByName() now call GetLocalIPAddress() if
    necessary to determine the local IP address, rather than returning
    127.0.0.1.
  * GetSystemPath(SYSTEM_PATH_EXECUTABLE) would break under MacOS/X if
    the executable path contained any non-ASCII characters.  Fixed.
  * GetSystemPath() was broken under Win32 if Unicode support was
    enabled.  Fixed.
  * hexterm now compiles properly under MacOS/X.

v3.02 Released 9/10/2005
  - The second argument to Hashtable::GetOrPut() is now optional.
  - Merged in Lior Okman's changes to the Java client API:  these
    included several bug fixes and the added ability to send
    compressed Messages.  (If you have JZLib in your class path,
    you can receive compressed Messages also)
  - Added Lior's build.xml file for ant-based compilation and
    JAR-packaging of the muscle java API (into the java folder)
  - Added FailoverDataIO.{cpp,h} to the support folder.  FailoverDataIO
    is a class that supports automatic failover across multiple redundant
    DataIO streams.
  - Connect() now takes an optional timeout argument, for people
    who are too impatient to wait for the operating system's standard
    TCP connect timeout period to elapse.
  - The ParseFile() function in MiscUtilityFunctions.{cpp,h} now supports 
    hierarchical sub-sections (delimited in the text file with "begin foo" 
    and "end" tag lines).
  - Added testparsefile.cpp to the test folder.
  o Moved the implementations of Inet_AtoN(), Inet_NtoA(), 
    SetLocalHostIPOverride() and GetLocalHostIPOverride() from
    NetworkUtilityFunctions.cpp to SetupSystem.cpp, so that projects
    can include MiscUtilityFunctions.cpp without having to also
    include NetworkUtilityFunctions.cpp
  o Removed the MUSCLE_USE_CLONE support from the Thread class, since it
    didn't work properly anyway.
  * The Win32 implementation of the Thread class would leak a thread handle
    each time the internal Thread terminated.  Thanks to Eivind Midtg√•rd 
    and Raymond Dahlberg for providing the fix!

v3.01 Released 8/13/2005
  - Added a "shared" parameter to the BindUDPSocket() function,
    to support the simultaneous reception of broadcast UDP packets 
    by multiple processes on a single computer.
  - Updated the included zlib distribution to v1.2.3
  - Updated the hexterm app to handle UDP packet I/O (in addition
    to the TCP stream and serial device data I/O it could do before)
  - Added equality (==) and inequality (!=) operators to the Hashtable class.
  * GetSystemPath(SYSTEM_PATH_EXECUTABLE) now returns the proper
    path under Linux (it uses the /proc filesystem to figure it out)
  * ChildProcessDataIO now uses the constants found in sys/ttydefaults.h
    to fill in the termios struct, instead of using hard coded magic numbers.

v3.00 Released 7/12/2005
  NOTE:  THIS RELEASE BREAKS SOURCE CODE COMPATIBILITY WITH PREVIOUS
  RELEASES OF THE MUSCLE API.  IF YOU HAVE CODE THAT WAS WRITTEN FOR
  PREVIOUS VERSIONS OF  MUSCLE, YOU WILL NEED TO MODIFY IT SOMEWHAT 
  IN ORDER FOR IT TO COMPILE AND RUN PROPERLY.  SEE THE TWO ITEMS 
  MARKED WITH (o) BELOW FOR DETAILS.
  - Added Matt Emson's client API for Delphi, in the "delphi"
    subdirectory.  Thanks, Matt!
  - Updated the included zlib distribution to v1.2.2.
  - Added StoreTraceValue(), TCHECKPOINT(), SetTraceValuesLocation(),
    and associated functions to MuscleSupport.h.  These functions can 
    be useful in tracking down where code is executing at when a 
    debugger isn't available.
  - Added a maxDepth argument to the LogStackTrace() call.
  - Added a PrintStackTrace() function to syslog/SysLog.{cpp,h}.
    This is similar to LogStackTrace(), but the stack trace
    goes directly to stdout instead of going to the log facility.
  - Added a "win32client" test/example app to the test folder.
    This app test/demos the Win32MessageTransceiverThread class.
    A VC++ project file (win32client.vcproj) is also included.
  - Added a SetSignalHandlingEnabled() method to the ReflectServer
    class, to allow servers to exit cleanly when an interrupt
    signal is received.
  - muscled now accepts an optional "catchsignals" argument that
    enables handling of interrupt signals (Control-C) to initiate
    a controlled shutdown.
  - muscleMax() and muscleMin() can now take up to five arguments,
    for convenience.
  - If you define the compiler constant MUSCLE_ENABLE_MEMORY_PARANOIA
    to an integer value (and also define MUSCLE_ENABLE_MEMORY_TRACKING), 
    then the muscle memory allocator/deallocator code will add that many
    guard values to the front and end of all dynamically allocated 
    buffers in order to detect bad memory writes.  The guard values will 
    be checked whenever the buffers are freed or resized, to make sure
    they haven't been overwritten, and it will also fill all allocated
    and freed buffers with special garbage bytes (0x55 and 0x66), 
    so that it will be more obvious when freed or uninitialized
    memory is read.  This slows down execution a bit and uses up 
    extra memory, so it should only be enabled while debugging.
  - Added a MemoryParanoiaCheckBuffer() function to 
    GlobalMemoryAllocator.{cpp,h}.  Call this function to manually
    validate that an allocated memory buffer hasn't been corrupted.
  - All AbstractObjectRecycler objects (i.e. all ObjectPools)
    now register themselves in a global linked list, so that
    they can be iterated over.
  - Added the function GlobalFlushAllCachedObjects() to the
    AbstractObjectRecycler class.
  - Added a FlushCachedObjects() virtual method  to the
    AbstractObjectRecycler class.  This method is implemented
    in the ObjectPool subclasses to call Drain().
  - The CompleteSetupSystem destructor now calls
    AbstractObjectRecycler::GlobalFlushAllCachedObjects(), so
    that all the ObjectPools get flushed before any static objects
    start getting destroyed.  This helps avoid dangling pointer
    problems caused by the undefined ordering of static object
    destructor calls.
  - Added GetCount() and SetCount() methods to the AtomicCounter 
    class, since it's occasionally necessary (albeit discouraged) 
    to get or set the counter's value explicitly.
  - Added IsRefPrivate() and EnsureRefIsPrivate() methods to
    the Ref class to help facilitate Copy-on-Write semantics.
  - Added a FlushInput() method to the PlainTextMessageIOGateway class.
  - Added a BUILDOPTIONS.txt file to the muscle folder, to document
    the various compile-time flags that muscle uses.
  - Added WriteFully() and ReadFully() convenience methods to
    the DataIO class.  These methods call Write() or Read()
    in a loop as necessary to guarantee that the whole buffer
    get written.
  - Added new convenience methods FlattenToByteBuffer(),
    UnflattenFromByteBuffer(), FlattenToDataIO() and 
    UnflattenFromDataIO() to the Flattenable class, so that you
    can now Flatten()/Unflatten() to/from ByteBuffers and
    DataIOs with a single call when using blocking I/O.
  - Added a GetLength() convenience function to the Flattenable
    class, for easy determination of a DataIO's length in bytes.
  - Rewrote InflateMessage() and DeflateMessage() so that they
    spend less time holding the global muscle lock.
  o Changed all Ref arguments to be passed by const reference 
    instead of by value.  Note that this change will break most 
    current Muscle-using source code -- your source code will 
    need to be changed to match, in order for the virtual methods 
    to be overridden properly.  To update your code, you should 
    change all function arguments of type BlahRef to (const BlahRef &).
  o Moved the AbstractObjectRecycler pointer out of the Ref class
    and into the RefCountable class, and changed it into an
    AbstractObjectManager pointer.  Removed the recycler
    argument from all Ref class methods.  This makes the
    Ref class a bit simpler and more efficient, but it also
    breaks existing source code.  To update your code, you
    should change all instances of BlahRef(blah, NULL) to 
    BlahRef(blah), and all instances of BlahRef(blah, NULL, false)
    to BlahRef(blah, false).
  o Replaced StorageReflectSession::DrainPools() with
    AbstractObjectRecycler::GlobalFlushAllCachedObjects(),
    which does the same thing but more thoroughly, since
    it flushes all ObjectPools and not just a few of them.
  o Moved a few overly large inline convenience functions into
    SetupSystem.cpp, for faster compilation and smaller binaries.
  o InflateMessage() now guarantees that the inflated Message
    will have the same 'what' code as the passed-in Message
    (the what code of the 'interior' Message is ignored).
  * Added a newnothrow_array #define to MuscleSupport.h and
    changed all the muscle code to use it instead of
    newnothrow when allocating arrays.  This macro works
    the same as new (nothrow) for arrays, except it works
    around a bug in gcc 3.x that could cause crashes on 
    memory failure.
  * ChildProcessDataIO now forces the removal if the SIGHUP
    signal handler in the child process, so that any 
    grandchild processes will be cleaned up when the child
    process is killed.
  * Improved ChildProcessDataIO handling of restricted 
    permissions on the /dev/tty* nodes.
  * Under Win32, if there were no sockets to select() on, select()
    would error out and the server loop would return.  Fixed.
  * Log() and LogTime() could forget to unlock the global
    muscle lock if called re-entrantly.  Fixed.
  * Fixed a nasty bug in the MUSCLE_POWERPC_TIMEBASE_HZ inline
    assembly implementation of GetRunTime64() that would cause 
    GetRunTime64() to very occasionally go into an infinite loop.

v2.65 Released 5/20/2005
  - Optimized the String class by providing overloaded 
    implementations of various common methods that take a 
    (const char *) directly, rather than a (const String &).
    This eliminates much of the need for the compiler to 
    construct and destroy temporary String objects when 
    using string literals.
  - Added StartsWith() and EndsWith() convenience methods
    to the Queue class.
  o Made about a dozen one-liner String methods into into
    inline methods, to reduce CPU overhead in calling them.
  * Fixed a bug in the Windows implementation of 
    ChildProcessDataIO that would cause the child process
    to be killed the first time it generated any text to stdout.
  * Fixed a problem in GetHumanReadableTimeValues() when 
    compiling under Windows with pre-WinXP headers.  Thanks 
    to Mika Lindqvist for helping with this fix.
  * Added an #ifdef for _SOCKLEN_T to NetworkUtilityFunctions.cpp,
    so that net_length_t will be typedef'd properly on systems
    that need it.

v2.64 Released 4/20/2005
  - ConvertMessageItemToPyObject() now handles restoring list 
    objects and dictionary objects.
  - testendian.cpp now does a bit more thorough job of testing
    the correctness of the byte swapping routines
  - Merged in Mika Lindqvist's patch to add inline-assembly 
    implementations of the byte-swapping and atomic counter
    functions for the Win32/Visual C++ build environment.
  - Added Equals(char), EqualsIgnoreCase(char), EndsWith(char),
    EndsWithIgnoreCase(char), StartsWith(char), and
    StartsWithIgnoreCase(char) methods to the String class.
  - Added an optional (maxResults) parameter to 
    ServerComponent::FindMatchingSessions(), and added a
    ServerComponent::FindMatchingSession() convenience method.
  - MuscleSupport.h now looks for a MUSCLE_FD_SETSIZE compiler
    constant; if found, it will use that to force the host's
    FD_SETSIZE to a new value (particularly useful under
    Windows where FD_SETSIZE is a pitiful 64... just add
    -DMUSCLE_FD_SETSIZE=512 to make it more reasonable)
  - Added a SetFromGenericUnchecked() method to the Ref class,
    for fast/unsafe reference-type conversion.  
  - Added testtime.cpp to the test folder, to test MUSCLE's
    time/date handling functions.
  - GetCurrentTime64(), GetHumanReadableTimeValues(), 
    ParseHumanReadableTimeString(), and GetHumanReadableTimeString() 
    now all take a timezone argument that indicates whether the uint64 
    time value arguments are meant to represent local time or UTC.  
    These parameters have default values that are set to preserve 
    the previous behavior, for backward compatibility.
  o Moved QMessageTransceiverThread's event handling code
    out into a virtual separate method, called
    HandleQueuedIncomingEvents().
  o Removed "volatile" keyword from the assembly byte-swapping
    inline function implementations, since it is not necessary
    and impedes optimization.
  * Merged in David Grossman's Visual C++ compatibility changes.
  * Fixed several bugs in the String class where memcpy() was
    being called in situations where memmove() was necessary.

v2.63 Released 2/6/2005
  - muscled now accepts "port=0" as a command line argument.
    This argument will cause muscled to choose an available
    TCP port to listen for incoming messages on.
  - Added a GetHumanReadableTimeValues() function to
    MiscUtilityFunctions.{cpp,h}.  It's similar to 
    GetHumanReadableTimeString(), except the results
    are returned as separate integers rather than as a String.
  - Added an optional "muscleSingleThreadOnly" bool argument to the 
    ThreadSetupSystem and CompleteSetupSystem constructors.  This
    flag lets you globally disable all Mutexes and other 
    MUSCLE thread-safety mechanisms at run time.  Useful if you 
    need to compile your app without the MUSCLE_SINGLE_THREAD_ONLY 
    compiler flag, but know (sometimes) at runtime that you will
    be running the process single-threaded...
  - Added a ChildProcessReadyToRun() hook method to the 
    ChildProcessDataIO class.  This method is called from inside
    the child process (except under Windows, which can't support it).
  - Added a GetSessionSelectSocket() convenience method to the
    AbstractReflectSession class.
  o ChildProcessDataIO now has a separate LaunchChildProcess()
    method, instead of launching the child process from inside
    the ChildProcessDataIO constructor.
  * Merged in Wilson Yeung's update to the C# client code --
    this update fixes an infinite-loop bug and makes flattening
    and unflattening of Message objects more efficient.
  * NetworkUtilityFunctions.cpp once again compiles under BeOS.
  * Incorporated Stephane Petithomme's patch to allow muscle
    to compile correctly under SunOS.
  * Merged in Monni's patches to GetSystemPath() so that it
    handles Windows Unicode paths correctly.
  * Replaced the Win32 implementation of GetCurrentTime64()
    with a more standard (read: accurate) implementation.
  * The Windows implementation of GetHumanReadableTimeValues()
    was not quite accurate.  Fixed.

v2.62 Released 1/1/2005
  - Added a SetUDPSocketBroadcastEnabled() function to the 
    NetworkUtilityFunctions API.
  - Added a broadcastIP constant declaration to NetworkUtilityFunctions.h
  - Updated the "listener" test program to send hex bytes that are 
    entered on stdin, to make outgoing TCP connections as well as 
    accepting incoming ones, and to be able to connect to an 
    RS232 serial port, if desired.  Renamed "listener" to "hexterm"
    to reflect its expanded functionality.
  - Added an AdoptBuffer() method to the ByteBuffer class, so that
    you can populate a ByteBuffer with a pre-existing array of bytes,
    if you are careful about memory-ownership issues..
  - Added a ChildProcessDataIO class, which is useful for spawning
    child processes and communicating with them interactively via 
    their stdin/stdout streams.  Works under POSIX, Windows, OS/X, and BeOS.
  - Added a RemoveANSISequences() function to MiscUtilityFunctions.{cpp,h}.
    This function strips all ANSI escape sequences from a given String.
  - Added a testchildprocess.cpp test to the test folder.  This
    program is used to make sure ChildProcessDataIO works correctly.
  - Added a system/SystemInfo.{cpp,h} support API.  These files contain
    a GetSystemPath() function (for locating various important directories
    on the host system), and a GetOSName() function that returns
    the name of the host operating system.
  o Adopted Jonas Sundstr√∂m' simplified Makefile for muscled.
  * Updated the dev-c++/muscled.dev file to properly build muscled.exe again.
  * The included Python scripts are updated to raise exceptions using
    proper Exception objects, rather than old-style bare-string exceptions.
  * pythonchat.py now handles exceptions properly.
  * SharedMemory regions are now created with full permissions (0777)
    instead of just permissions for user and group (0770).
  * Worked around a gcc inline-assembly bug in the PowerPC assembly
    implementation of GetRunTime64().  (this bug would cause GetRunTime64()
    to sometimes return the wrong value if the MUSCLE_POWERPC_TIMEBASE_HZ
    compiler constant was defined)
  * Added some BeOS-compatibility tweaks to the RS232DataIO class.
    (I haven't really tested them to see if they work properly though)

v2.61 Released 11/04/2004
  - Added a CPULoadMeter class to the util subfolder.  The CPULoadMeter
    class knows how to monitor the amount of CPU being used on your
    system.  Handy for doing xload style status displays.  Implemented
    for OS/X, Windows, and Linux only.
  - Added Jeff Koftinoff's Win32FileHandleDataIO class to the winsupport
    directory.
  - Added a "testtypedefs" test to the test folder.  You can run this 
    program to check that the MUSCLE typedefs (int8, int16, int32, etc)
    are correctly defined for your build environment.
  - Added SetMaxPoolSize() and GetMaxPoolSize() methods to the 
    ObjectPool class.
  - Added a handy utility named "listener" to the test folder.
    This simple program just listens on a specified port and prints 
    out (in hexadecimal) the bytes it receives from any connecting 
    TCP client.
  - Added PLOCK() and PUNLOCK() macros to Mutex.h, and a new utility
    called deadlockfinder.cpp to the test subfolder.  Together, these 
    are useful for tracking down potential synchronization deadlocks in
    multithreaded programs.  See tests/deadlockfinder.cpp for details.
  * Added Peter Vorwerk's Tru64-compatibility patches.
  * Added Julien Torres' AMD64-compatibility patches.
  * Added an #ifdef to Thread.{cpp,h} so that the Thread class will
    compile properly with older (pre 3.2) versions of Qt.
  * Tweaked the code to again compile properly under BeOS/R5/PPC.
  * muscleFree now checks its argument for NULL-ness when memory
    tracking is disabled.

v2.60 Released 9/25/04
  - Added in the initial implementation of the MiniMessage code.
    MiniMessage is a minimalist C-only implementation of the Message 
    dictionary class, for use with C programs or C++ programs where
    simplicity and low resource usage is more important than flexibility
    and convenience.  See the minimessage subfolder for details.
  - Added a Clear() method to the String class, for more efficient
    resetting of String objects.
  - Added a SetFromString() method to the String class, for more efficient
    copying of String objects.  Changed the copy constructor and 
    assignment operator to call this method instead of SetCstr().
  - Added a constructor to the String class that takes a String and
    a maximum length in characters.
  - Added HashtableIterator constructors that take the Hashtable to
    iterate over as an argument, which is more convenient and efficient
    than calling table.GetIterator()
  - Rewrote the HashtableIterator construction code to be more efficient.  
  - Added a compiler flag MUSCLE_AVOID_ASSERTIONS.  If you specify this
    flag in your Makefile, all MASSERT statements will become no-ops.
  - MuscleSupport.h is now parseable as a C header file (the C++ portions
    of this file will be #ifdef'd out when compiling as C).  The non-C++
    inline functions in this file are now declared as 'static inline'
    to avoid linker problems when compiling C programs.
  o muscled is now compiled with optimizations enabled by default.
    To turn optimization off, compile muscled using 'make debug' instead.
  * Merged in Monni's patch to make the INT64_FORMAT_SPEC, the
    UINT64_FORMAT_SPEC, and the MCRASH_IMPL macros work correctly under
    Visual C++ 6.0.
  * Calling Destroy() more than once on a Python MessageTransceiverThread 
    object would cause an exception to be thrown.  Fixed.

v2.52 Released 8/13/04
  - Added a GetInternalQThreadPriority() hook to the Qt implementation
    of the Thread class.  This lets you specify the Thread priority
    of MUSCLE Threads launched from Qt programs, if you wish to.
  - Added a GetEmptyString() convenience function to the String class.
    This function returns a read-only reference to an empty string.
  * The Read() and Write() methods of the FileDescriptorDataIO class
    now return the correct values when used in blocking I/O mode.
  * Fixed a syntax error in Tuple::Replace() (thanks to Mika Lindqvist
    for bringing this to my attention).
  * Merged in Mika's patch to Message.cpp that fixes the template code
    so that it will compile without errors under gcc 3.4.1.
  * Rewrote the MuscleX86SwapInt64(), MuscleX86SwapDouble(), 
    MusclePowerPCSwapInt64() and MusclePowerPCSwapDouble() inline
    assembly functions to work around problems with gcc's optimizer.
  * ParseArgs() now properly parses arguments with commas in them.
  * Integrated Wilson Yeung's fix for a race condition in the C# code.

v2.51 Released 6/27/04
  - Wilson Yeung contributed an alpha version of a C# port of the Java 
    client code (included in the "csharp" subdirectory).  Thanks Wilson!
  - GetRunTime64() can now use the PowerPC time-base register,
    if running on a PowerPC CPU and you have #defined the compiler 
    constant MUSCLE_POWERPC_TIMEBASE_HZ as the proper update rate.
  - Added SetMemoryAllocationStrategy() and GetMemoryAllocationStrategy()
    methods to the ByteBuffer class.  You can call these to specify an
    IMemoryAllocationStrategy object that the ByteBuffer will use to
    allocate and free its buffers, instead of calling muscleAlloc() and
    muscleFree().
  - The PlainTextMessageIOGateway class now has SetFlushPartialIncomingLines()
    and GetFlushPartialIncomingLines() methods, to govern whether "orphan"
    incoming text without a carriage return should be passed to the owner
    immediately, or whether it should be buffered until the carriage return
    is read.
  - Added in Monni's QNX compatibility patches.
  * Calling SetGateway() or SetDataIO() from within a ClientDisconnected()
    callback now does the right thing, instead of just immediately 
    disconnecting the newly installed gateway (or DataIO) object afterwards.

v2.50 Released 6/01/04
  - If using gcc on a PowerPC or x86 target, inline assembly will be used 
    in the B_SWAP_* byte swapping macros, which is more efficient than the
    traditional muscleSwapBytes() template function.
  * IsRegexToken() now also returns true when passed in any of the
    following characters: =^+${}:-
  * Removed the kludgy workaround from Mutex.h that simulated a recursive
    pthreads Mutex using an int counter, and replaced it with a proper
    PTHREAD_MUTEX_RECURSIVE Mutex.  Note that the new code requires
    a UNIX98 compatible pthreads implementation -- under Linux, you
    may need to add -D_GNU_SOURCE to your Makefile in order to use this
    code.

v2.49 Released 5/07/04
  - The "daemon" keyword now takes an optional argument specifying
    where the daemon process's stdout and stderr should be redirected
    to.  If no argument is specified, /dev/null will be used by default.
  - Added support in the Thread class for a MUSCLE_USE_CLONE compile flag.
    If specified, this flag tells the Thread class to use Linux's clone()
    system call to create new threads, instead of the pthreads API.  If
    this flag is defined, the method Thread::SetCloneParameters() is
    available to specify the child thread's launch flags and stack size.
  - Added SwapContents() methods to the Message, ByteBuffer, and Ref classes.
  o StorageReflectSession methods SetDataNode(), RemoveDataNodes(), and
    InsertOrderedData() are now virtual.
  o The (createIfNecessary) argument to SpawnDaemonProcess() and
    BecomeDaemonProcess() now defaults to true.
  o ServerComponent::IsAttachedToServer() is now public.
  * ParseArgs() now handles comment # marks inside quotes properly.
  * Fixed a couple of Win32 incompatibilities.  Thanks to Monni
    for reporting these.
  * SysLog.cpp wouldn't compile under BeOS/PPC.  Fixed.
  * QMessageTransceiverThread::event() is now public and not a slot.
  * ByteBuffer::SetNumBytes() wasn't updating number-of-valid-bytes 
    value correctly when called with retainData=true.  Fixed.

v2.48 - Released 3/17/04
  - Added a GetGroupSize() accessor method to the 
    SharedUsageLimitProxyMemoryAllocator class.
  - Added ParsePort() and ParseConnectArg() convenience methods to the 
    MiscUtilityFunctions.{cpp,h} files.  These functions let you
    easily parse values out of "port" and "hostname:port" arguments.
  - Added an IsCallerInternalThread() method to the Thread class.
    This method returns true iff it's being called from the internal
    Thread itself, or false otherwise.
  - Added GetOwnerSocketSet() and GetInternalSocketSet() methods to
    the Thread class.  These let you customize the blocking behaviour 
    of GetNextReplyFromInternalThread() and WaitForNextMessageFromOwner(),
    respectively.
  - Added a ParseArgs() method to MiscUtilityFunctions.{cpp,h}.
    This method knows how to parse multiple arguments from a line of text.
  o The Thread class now prefers to use the Windows threading API
    over Qt threading when, both are available.
  * Connect() now logs an appropriate error message if a hostname
    lookup fails and logging is enabled.
  * Rewrote LogLineCallback::Log() to be more robust (it now calls 
    vsnprintf() instead of vsprintf() and does proper bounds checking)
  * Fixed a problem with Message.py's parsing of 64-bit Message fields.  
    Thanks to pyCube for reporting this bug!
  * Cleaned up miscellaneous errors in the autodoc header comments.

v2.47 - Released 2/26/04
  - The muscle code now supports a -DMUSCLE_AVOID_NAMESPACES compile
    flag that will cause all namespacing directives to be commented out.
  * Fixed an off-by-one error in String::SwapContents() that would cause 
    memory corruption if the longer of the two strings contained 7 bytes.
  * The SetFromArchive() methods of the AndOrQueryFilter and 
    the NandNotQueryFilter classes were broken.  Fixed.
  * UDP didn't work in Windows, because sin_family wasn't being set.  Fixed.
  * Fixed a bug that would cause ambiguities in the semantics of the 
    PR_RESULT_DATAITEMS Message, if a subscribed database node was updated 
    and then deleted immediately afterwards.

v2.46 - Released 1/27/04
  - Added some UDP support:  There is now a UDPSocketDataIO class, and the 
    following new NetworkUtilityFunctions:  CreateUDPSocket(), BindUDPSocket(),
    SetUDPSocketTarget(), SendDataUDP(), and ReceiveDataUDP().
  - Added some advisory timeslicing support to the PulseNode class.  Now
    any PulseNode subclass can find out when its time-slice started, by
    calling GetCycleStartTime(), set a suggested time-slice-limit by calling
    SetSuggestedMaximumTimeSlice(), and check to see if that time limit is up
    by calling IsSuggestedTimeSliceExpired().  These methods can be used 
    to help ensure consistent low latency to all clients.
  - Added a MathSetupSystem class (included in the CompleteSetupSystem class).
    This class disables BorlandC's floating point exceptions, to avoid 
    crashing when a floating point exception occurs.
  - Added callback function arguments to CloneDataNodeSubtree(), to allow
    you to easily customize the Message payload of any nodes that it creates.
  - Added String::SwapContents() and Queue::SwapContents() methods for 
    efficient (O(1)) state swapping between objects of these classes.
  - Added a HandleStandardDaemonArgs() function to MiscUtilityFunctions.
    This function parses command line arguments that are of general use.
  - Added a muscleSgn() convenience template function to MuscleSupport.h.
  o DisconnectSession() now returns a bool indicating whether or not
    the session decided to terminate itself.
  o Moved BecomeDaemonProcess() and SpawnDaemonProcess() from
    NetworkUtilityFunctions.{cpp,h} to MiscUtilityFunctions.{cpp,h}.
  o Rewrote muscledMain() to parse arguments using ParseArgs() and
    HandleStandardDaemonArgs(), rather than by looking at argv directly.
  o Rewrote Thread::InternalThreadEntry() to be cleaner.
  o Rewrote String::Replace() to be much more efficient.  Also, it now returns
    the number of substring replacements done, rather than an error code.
  * Failed asynchronous-connect-attempts instigated by a call to 
    AddNewConnectSession() were not being detected under Windows.  Fixed.
  * Calling AbstractReflectSession::Reconnect() from inside the 
    AbstractReflectSession::ClientConnectionClosed() method now works properly.
  * Calling AddNewSession(ref, int) with an AbstractReflectSession that 
    already had a DataIO object installed would cause the pre-installed 
    DataIO object to be deleted and replaced.  Now the pre-installed 
    DataIO object is retained, instead.
  * SharedMemory::SetArea() with a zero createSize parameter now works 
    correctly under Windows.

v2.45 - Released 11/10/03
  - Added GetNextKeyAndValue() convenience methods to the Hashtable class.
  - Added an Atoll() function to MiscUtilityFunctions, to complement
    the already included Atoull() function.
  - Added a Pad() convenience method to the String class, for easy
    padding of a string to a given minimum length.
  - Added SetSocketSendBufferSize() and SetSocketReceiveBufferSize()
    functions to the NetworkUtilityFunctions function collection.
  - Added a ConvertReturnValueToMuscleSemantics() function to MuscleSupport.h,
    and modified the various DataIO classes to call this function instead of
    each one reimplementing the conversion-logic separately.
  - Added QString-style Arg() methods to the String class, so that numeric values
    can be inserted into strings in a convenient and relatively safe manner.
  o Moved the PreviousOperationWouldBlock() and PreviousOperationWasInterrupted()
    functions from NetworkUtilityFunctions.h to MuscleSupport.h, since they
    weren't really networking-specific.
  o Moved the %llu's and %lli's into MuscleSupport.h constants 
    INT64_FORMAT_SPEC and UINT64_FORMAT_SPEC, so that they are
    defined correctly for different compilers (some expect %Lu instead).
  * GetRunTime64() now contains a work-around for a bug in Windows'
    QueryPerformanceCounter() function that would cause time to "skip ahead"
    under certain motherboard chipsets.  See system/SetupSystem.cpp for details.
  * Under Windows, GetCurrentTime64() was returning microseconds-since-1601.
    Fixed it to return microseconds-since-1970, as documented.
  * GetCurrentThreadId() was misspelled in Win32Support.h.  Fixed.
  * Renamed the SWAP_* macros to B_SWAP_*, for consistency with the
    naming convention used in the other macros.
  * The FileDescriptorDataIO class now handles EINTR and EWOULDBLOCK
    return values appropriately, instead of erroring out.

v2.44 - Released 09/15/03
  - The QAcceptSocketsThread and QMessageTransceiverThread constructors
    now take optional parent and name arguments, which are passed on to the
    QObject constructor.
  - The QAcceptSocketsThread and QMessageTransceiverThread destructors
    now call ShutdownInternalThread(), so you no lnoger have to call it 
    yourself if you don't want to.
  - Added a setNotifyOutputQueueDrainedTag() method to MessageTransceiver.java,
    so that the user thread can be notified when the output queue drains. 
    Thanks to Bryan Varner for this code.
  - Added a Replace() method to the Tuple class.
  * Some of the SetFromArchive() calls in MultiQueryFilter and its
    subclasses didn't mark their argument as const.  Fixed.
  * Queue::AddTail(const ItemType *, uint32) was broken.  Fixed.
  * Removed reference to QEvent::MaxUser from the QMessageTransceiverThread
    class, so that it can be compiled against Qt 2.3.
  * Replaced calls to QThread::postEvent() with QApplication::postEvent().

v2.43 - Released 08/19/03
  - Added an optional (count) argument to String::Append() and
    String::Prepend().
  - Added a DisconnectSession() method to the AbstractReflectSession class.
    Calling this method force-disconnects the session's TCP connection.
  - PR_COMMAND_SETDATA now processes multiple sets to the same node in
    a single Message.
  - Added a (numPreallocSlots) argument to the Queue::EnsureSize() method,
    so you can specify how many extra slots to preallocate in the event
    of an array reallocation.
  - Added SetSignalHandle(), SetSignalValue(), and SetReplyThreadID()
    methods to the Win32MessageTransceiverThread class.
  * Fixed a bug in Hashtable::Clear() that could cause crashes under
    certain circumstances (iterators weren't being unregistered reliably).
  * Fixed a bug in the Queue class that was disabling queue-slot-preallocation,
    making calls to AddHead() and AddTail() inefficient -- O(N) instead 
    of amortized O(1).  Oops!
  * The Win32 implementation of GetHumanReadableTimeString() was returning
    date strings 369 years too early.  Fixed.

v2.42 - Released 7/15/03
  o DebugTimer's default minimum-print time is now 1000 (1 millisecond)
  o DeflateMessage()'s force parameter now defaults to true.
  * Fixed a bug in PathMatcher::MatchesPath() that would cause absolute
    paths to not be matched correctly.  Thanks to VitViper and Monni for
    reporting this bug!
  * ReflectServer::GetServerUptime() was broken.  Thanks to Monni
    for finding this bug!
  * The first call to Queue::EnsureSize() no longer does an implicit doubling
    of the initial array size, since it's likely that the caller to EnsureSize()
    has the best idea of how many slots are needed, and thus shouldn't be
    second-guessed.

v2.41 - Released 6/27/03
  - Added an sdlsupport folder with Shard's SDLMessageTransceiverThread class
    in it.  This class interfaces MUSCLE to the SDL game library.  Thanks Shard!
  - Added a PRINT_CALLS_PER_SECOND macro to TimeUtilityFunctions.h
  - Added a PreviousOperationWasInterrupted() function to NetworkUtilityFunctions.h
  - ZLibCodec::GetInflatedSize() now takes an optional second argument which
    can be used to find out if the given compressed buffer is independent or not.
  - Added ZLibUtilities.{cpp,h} to the zlib folder.  This file contains
    InflateMessage() and DeflateMessage() functions that are handy for
    compressing Messages down into a flattened state for efficient storage.
  - Added a muscleRealloc() function to GlobalMemoryAllocator.h, to go with
    the already existing muscleAlloc() and muscleFree() functions.
  - The String and ByteBuffer classes now use muscleRealloc() when 
    appropriate, to avoid unnecessary data copying while resizing buffers.
  - Added a minimum-log-time argument to the DebugTimer class so that
    printing of very small time intervals can be suppressed.
  - Added a GetNumPreallocatedSlots() accessor method to Hashtable.
  - Added GetHumanReadableTimeString() and ParseHumanReadableTimeString()
    functions to util/MiscUtilityFunctions.h.  These functions convert uint64 
    time values to ASCII "YYYY/MM/DD HH:MM:SS" strings, and vice versa.
  o SetupSystem's constructor is now protected, to make sure nobody declares
    a SetupSystem object by itself (they should use CompleteSetupSystem instead)
  o Removed the (copyBuffer) argument from the ByteBuffer constructor and
    several associated methods, because it was error prone and not
    very useful.
  * Fixed a crashing bug in Queue.AddHead(const Queue &)
  * SharedUsageLimitProxyMemoryAllocator::AllocationFailed() was broken.  Fixed.
  * String::SetCstr() would store bytes past the NUL terminator of the passed-in
    string if (maxLen) was too large.  Fixed.
  * Made String::Substring() is more efficient, and it now handles
    out-of-range values gracefully, instead of throwing an assertion failure.
  * The String constructor and SetCstr() took an int32 for (maxLen).  
    Now they take a uint32 instead.
  * Replaced calls to CreateThread() with calls to _beginthreadex() in the
    Win32 implementation of the RS232DataIO and Thread APIs.
  * The (independent) flag to ZLibCodec::Deflate() wasn't working properly.
    Fixed.  (The ZLibCodec header format has also changed slightly)

v2.40 - Released 6/2/03
  - MUSCLE is now licensed under the standard BSD Open Source License.
    (Previously it used an equivalent but non-standard license)
  - Added the optional zlib compression library to the MUSCLE archive.
    (Add -DMUSCLE_ZLIB_ENCODING_ENABLED to your Makefile to enable it)
  - Added 9 levels of ZLib encodings to the MessageIOGateway class
    (MUSCLE_MESSAGE_ENCODING_ZLIB_1, ..., MUSCLE_MESSAGE_ENCODING_ZLIB_9)
  - Added QueryFilter objects (regex/QueryFilter.{cpp,h}) to allow queries
    to be restricted to include only nodes whose data Messages match
    user-specified criteria.
  - Rewrote the PathMatcher class and API to support QueryFilter objects.
  - Added a PR_NAME_FILTERS keyword that can be added to commands (along
    with PR_NAME_KEYS) to restrict results based on a QueryFilter.
  - Added a QueryFilterRef parameter to the SendMessageToMatchingSessions(),
    FindMatchingSessions(), and RemoveDataNodes() methods of the 
    StorageReflectSession class.
  - Rewrote the MessageIOGateway implementation and protected API to
    use ByteBuffers, in order to better support ZLib encoding.
  - Added a PR_NAME_REPLY_ENCODING parameter to StorageReflectConstants.
    This parameter can be used to tell muscled to compress Messages that
    it sends back to your client.
  - Added a SetOutgoingMessageEncoding() method to the 
    MessageTransceiverThread class.
  - Added a GetRunTime64() function to TimeUtilityFunctions.h.  This
    function is similar to GetCurrentTime64(), except it is not synced
    to the real-time clock, and thus is guaranteed not to jump around
    (e.g. when the user sets the system clock, or during leap-seconds)
    GetRunTime64() is now used instead of GetCurrentTime64() where appropriate.
  - Added a Reset() method to all the AbstractMessageIOGateway classes,
    so that they can be re-used after a disconnect or parse error.
  - Merged in Bryan Varner's enhancements to the Java muscle code.
    These include a new Preferences wrapper class, and non-exception
    throwing get*() methods in Message class.  Thanks, Bryan!
  - Calls to the installed LogCallbacks are now checked so that
    re-entrant calls (read: infinite recursion) cannot occur.
  - StorageReflectSession::SendMessageToSessions() and
    StorageReflectSession::FindMatchingSessions() now take
    a (matchSelf) boolean argument.
  - Optimized the Hashtable class to be a bit more efficient.
  - Added an AddPathFromString() convenience method to the PathMatcher class.
  - Added a muscleVoidPointer convenience typedef to MuscleSupport.h
  - Added IsReadyForInput() and HasBytesToOutput() methods to the
    AbstractReflectSession class; ReflectServer now calls these,
    and the default implementations pass the calls through to the gateway.
  - Added a GetOrPut() convenience method to the Hashtable class.
    (handy for demand-allocated Hashtable entries)
  - ByteBuffers no longer re-allocate their memory buffer when 
    they are resized smaller.
  - Added DebugTimer.{cpp,h} to the utils subfolder.  This class
    is useful for quick-and-dirty profiling of code execution times.
  - Added a GetTimeSliceElapsedTime() method to the ServerComponent
    class, so that sessions and factories can see how much time
    they have taken so far in their current cycle iteration.
  - Added an EnsureSize() method to the Hashtable class, to support
    pre-allocating tables (for efficiency).
  - Added item-array implementations of AddHead() and AddTail()
    to the Queue class.
  - Added optional startIndex and numItems arguments to the Queue-arg
    implementations of AddHead() and AddTail() in the Queue class.
  - Updated the Beginner's Guide HTML to document QueryFilters,
    ZLib encoding parameters, and a few other details that had
    been left out of it.
  o Moved the ByteBufferPool functions from Message.{cpp,h} to
    ByteBuffer.{cpp,h}.
  o Demoted certain log messages from MUSCLE_LOG_INFO priority 
    to MUSCLE_LOG_DEBUG priority.
  o Adjusted the DECLARE_MUSCLE_TRAVERSAL_CALLBACK macro to make
    it more reusable in StorageReflectSession subclasses.
  o The ByteBuffer class now refers to its data as an array of uint8's,
    rather than using void pointers.
  * RateLimitIOSessionPolicy would divide by zero if you
    specified a rate limit of zero bytes per second.  Fixed.
  * RS232DataIO::GetAvailableSerialPortNames() now works correctly
    under MacOS/X.
  * Fixed a couple of VC++-specific code problems.
  * Fixed a bug that was causing Messages sent to a 
    MessageTransceiverThread to be sent back to the user thread.
  * StorageReflectSession::FindMatchingSessions() was broken.  Fixed.

v2.31 - Released 4/14/03
  - Rewrote the Hashtable class so that it no longer needs to
    allocate HashtableEntries dynamically during hash clashes.
  - Added in a remapping layer to the HashtableEntries so that
    Hashtable operations can be efficient even when the Hashtable
    is full or nearly full.  Removed the (loadFactor) argument to
    the Hashtable constructor.
  - Lowered the Hashtable's default (initialCapacity) to 7.
  - Added some new optional parameters to StorageReflectSession's
    SetDataNode() and CloneDataNodeSubtree() methods to allow for
    more control over how nodes get placed into their parent's index.
  - Added muscleAlloc() and muscleFree() calls to the
    GlobalMemoryAllocator.h API, for those who like C-style 
    memory management.
  - Added GetArrayPointer() methods to the Queue class.  This
    enables efficient bulk-manipulation of items in the Queue.
  - Added an optional node-name argument to DataNode::InsertOrderedChild().
  - Added an optional "releaseDataBuffers" argument to the Clear()
    methods of Queue, Hashtable, and Message classes, to force
    the immediate release of internally held memory buffers.
  - Added GetNumAllocatedItemSlots() method to the Queue class.
  - Added a muscleRintf() function to MuscleSupport.h
  - Added a Win32MessageTransceiverThread class to the winsupport 
    folder.  This subclass interfaces the MessageTransceiverThread 
    class to the Win32 event API.
  - Added support for MUSCLE_DISABLE_DEBUGGING compile-time
    flag to turn all Log(), LogTime(), etc calls into no-ops.
  - Added a GetGlobalMuscleLock() function that returns a process-wide
    Mutex for simple serialization of Log operations, etc.
  - Added an argument for enabling Nagle's algorithm to
    CreateConnectedSocketPair().  Defaults to false/disabled.
  - Added a GetPosition() method to the DataIO interface and
    all subclasses thereof.
  * Fixed a bug in RestoreNodeTreeFromMessage() that would 
    sometimes cause indexed nodes not to be restored.
  * Fixed a bug in Queue::EnsureSize(x, true) where sometimes it 
    _itemCount wouldn't be properly set after a successful call.
  * Some of the byte-order-swap macros weren't handling complex
    arguments correctly.  Added extra parentheses to fix them.
  * Added support for a -DMUSCLE_AVOID_NEWNOTHROW flag that will
    tell all MUSCLE code to use new instead of new (nothrow).
  * Trim() will no longer strip UTF8 chars from the end of a String.
  * Fixed a bug in the RateLimitSessionIOPolicy that would cause
    rate-limited transfers to occasionally stall.  Thanks to  
    Garjala for all his help in tracking this problem down!
  * Sessions that are about to be destroyed now have DoOutput()
    called on them, in case they have any last-second data to send.
  * Muscle now includes <new> instead of <new.h> to avoid gcc warnings.
  * MessageIOGateway::DoInputImplementation() would sometimes hold
    on to a large memory buffer instead of freeing it immediately.  Fixed.
  * muscleAbs() was returning int instead of the templated type.  Fixed.

v2.30 - Released 3/03/03
  - Added a SharedMemory class to the system folder.  This class
    acts as a platform-neutral wrapper API for the host OS's 
    cross-process-shared-memory-area facilitities.
  - Rewrote the MemoryAllocator API to be more flexible.
  - ReflectServer's constructor now takes a MemoryAllocator
    pointer instead of a UsageLimitProxyMemoryAllocator pointer.
  - Added a SharedUsageLimitProxyMemoryAllocator class that
    uses a small shared memory area to allow multiple daemon 
    processes to share a single aggregate memory-usage cap.
  - Added a Reconnect() method to the AbstractReflectSession
    class.  This lets a session that was added with 
    AddNewConnectSession() restore his connection if it breaks.
  - Added a GetSessionDescriptionString() method to the
    AbstractReflectSession class, for convenience.
  - Added GetAsyncConnectIP() and GetAsyncConnectPort()
    methods to AbstractReflectSession, for convenience.
  - Added a FindMatchingSessions() method to the
    StorageReflectSession class, for convenience.
  - GetPathDepth() now handles paths without a leading slash correctly.
  - Added SetSocketNaglesAlgorithmEnabled(), ShutdownSocket(),
    SendData(), ReceiveData(), and PreviousOperationWouldBlock() 
    to the NetworkUtilities function collection.
  - Added IsBlockingIOEnabled() and IsNaglesAlgorithmEnabled()
    accessor methods to the TCPSocketDataIO class.
  - Added the AbstractGatewayMessageReceiver interface, and the
    QueueGatewayMessageReceiver convenience class.
  - Rewrote ReflectServer::ServerProcessLoop() to be slightly
    more efficient and fair.
  - Added a (void *) misc-utility argument to the 
    MessageReceivedFromGateway() method, and made it part of
    the AbstractGatewayMessageReceiver interface.
  - Added testnagle.cpp and testresponse.cpp to the test folder.
  o Inet_NtoA() no longer returns a String object, since that
    requires the String class to be linked in to programs that
    could otherwise live without it.
  o Rewrote the AbstractMessageIOGateway API to be more efficient.
    Gateways no longer maintain a Queue of incoming Messages; rather,
    whenever they parse a Message they immediately pass it to a
    specified AbstractGatewayMessageReceiver object.
  o AbstractMessageIOGateway subclasses no longer override DoInput()
    and DoOutput() directly.  Instead, they should implement/override
    DoInputImplementation() and DoOutputImplementation().
  o Moved the StringMatcher and StringMatcherQueue singleton
    ObjectPools out of the StorageReflectSession class and into
    the StringMatcher.cpp and PathMatcher.cpp files, respectively.
    They can now be accessed anywhere, via the functions 
    GetStringMatcherPool() and GetStringMatcherQueuePool().
  o PathMatcher no longer accepts pointers to ObjectPools in its
    AddPathString() methods -- instead it just always uses
    the appropriate singleton ObjectPools.
  o Removed the type_code data type; now uint32 is used instead.
  o Removed the PulseNode::Tick() method hook, since it turned
    out to be unnecessary and encourages bad programming habits.
  * ReflectServer's status output is now more informative.
  * The ThreadSetupSystem and NetworkSetupSystem classes now 
    handle multiple nested instantiations gracefully.
  * TCPSocketDataIO's Read() and Write() calls would return an
    error code for zero-length reads or writes.  Fixed.
  * PathMatcher::MatchesPath() wasn't giving correct results
    for paths with leading slashes.  Fixed.
  * TCPSocketDataIO::FlushOutput() wasn't working in OS/X.  Fixed.

v2.25 - Released 2/04/03
  - Renamed Hashtable::Get() to GetValue() (Get() is preserved
    as a synonym for compatibility with existing code)
  - Added two Hashtable::GetKey() methods to allow quick lookup
    of held key objects.
  - Added a PrintStackTrace() function to the SysLog module.
    MCRASH() and MASSERT() now call PrintStackTrace() so you
    get more debug info when you crash.  (Only works under gcc)
  - Added a (setNumItems) argument to Queue::EnsureSize(), which
    can be handy if you want to add or remove a large number of
    default data items at once.
  - Updated MessageTransceiver.java with Bryan Varner's changes.
  - Hashtable::Sort() now uses Simon Tatham's very efficient 
    merge-sort algorithm instead of insertion sort.
  - Added ToString() and AddToString() methods to the Message class.
  - Added a SetCstr() method to the String class.
  * binary String operators now return String instead of const String.
  * StorageReflectSession::CloneDataNodeSubtree() was not 
    cloning node indices.  Fixed.
  * DataNode::InsertIndexEntryAt() now uses GetKey() so as not
    to have to iterate over the node's child list.

v2.24 - Released 11/15/02
  - Added an "oldData" argument to StorageReflectSession's
    NotifySubscribersThatNodeChanged() and NodeChanged() methods,
    and removed the NodeCreated() and NotifySubscribersOfNewNode()
    methods (since they are now redundant).
  - Added a "backwards" flag argument to Message::GetFieldNameIterator(),
    and added a Message::GetFieldNameIteratorAt() method.
  - Added a GetBlankMessage() convenience method to the 
    StorageReflectSession class.  This method returns a reference to 
    an empty Message.
  - Optimized the tree search traversal algorithm so that non-wildcard
    patterns do a single hash lookup instead of matching against every 
    child node.
  - Added GetPattern() and IsPatternUnique() methods to the 
    StringMatcher class.
  - StringMatcher::SetPattern and the StringMatcher constructor
    now take a (const String &) instead of a (const char *).
  - Merged in Bryan's enhancements the the Java classes.  The
    Jave MUSCLE API now includes better support in the 
    MessageTransceiver class for listening for incoming TCP
    connections, and a way to interrupt() the current Thread 
    running in a MessageQueue.
  - String::Replace() now returns a status_t to indicate whether
    any replacements were actually made or not.
  * QMessageTransceiverThread was using an illegal event code to
    signal the master thread of new network events.  Fixed.

v2.23 - Release 11/01/02
  - Added RS232DataIO.{cpp,h} to allow for simple serial port I/O.  
    Currently it only works under Windows and Linux; support for 
    other OS's may be added in the future, if there is need for it.
  - Exposed the AddPyObjectToMessage() function in the Python
    argument-conversion-utilities package.
  * Cleaned up the various comparison operators to return bool 
    instead of int, and the equality-adjustment operators to
    return (Class &) instead of (const Class &)
  * Tweaked the code to compile cleanly under gcc 3.x.

v2.22 - Release 10/16/02
  - Added PR_COMMAND_SETDATATREE, PR_COMMAND_GETDATATREE,
    and PR_JETTISON_SUBTREES commands, and a PR_RESULT_DATATREE 
    reply.  These can be used to conveniently get and set 
    database subtrees.
  - MessageGateways now free their scratch buffers if they
    are bigger than 10 kilobytes, so as not to waste memory after
    having sent or received a very large Message.
  * Integrated Monni the Cat's VC++6 compatibility tweaks.
  * Fixed a horrendously embarrassing memory leak in muscled.  
    In fact, ALL of muscled's heap memory allocations were being 
    leaked, as of v2.18.  Sorry guys, that was a really dumb 
    mistake.  :^( 

v2.21 - Released 10/08/02
  - Added a muscleAbs() utility template to MuscleSupport.h
  - Queue::RemoveItemAt() and Queue::InsertItemAt() have been
    optimized a bit -- they should be about twice as fast now.
  - Added a GetLogLevelKeyword() function to SysLog.h
  - StringMatcher::SetPattern() now looks for an optional tilde
    character ('~') at the beginning of simple patterns; if it
    finds it, it sets a negate flag so that Match() will return
    the logical opposite of what it usually would return.
  - Added manual SetNegate() and IsNegate() methods to the
    StringMatcher class.
  - IsRegexToken() now takes a second argument specifying whether
    the character in question is the first in the string (since
    there are several characters that are only 'special' when they
    are the leading character)
  - Database node paths are no longer cached, to save memory.
    Instead, GetNodePath() now generates the node-path on the fly,
    as needed.  Because of this, the function signatures of 
    GetNodePath() and GetNodeName() have changed.
  - Added a handy DataNode::GetPathClause() method that allows
    quick access to the node name at a specified depth in 
    a node's path.
  * Queue::GetItemPointer() is now named GetItemAt().  (The old
    name is still available, but deprecated).
  * The PowerPC assembly implementation of atomic increment and
    decrement wasn't being used under OS/X.  Fixed.

v2.20 - Released 9/05/02
  - Added a () convenience operator to the MessageFieldNameIterator
    class.  It operates as a synonym for GetNextFieldNameString().
  - Added PythonUtilityFunctions.{cpp,h}, which currently includes
    two functions, ConvertMessageItemToPyObject(). and 
    ParsePythonArgs().  These are useful when embedding Python
    and MUSCLE C++ code into the same application.
  - Added ParseArg() and ParseFile() methods to MiscUtilityFunctions
    .cpp and .h files.  These parse an argument (ParseArgs()) style
    out of a single string, or a FILE pointer, respectively.
  - Added a GetScheduledPulseTime() to the PulseNode class.  This
    method returns the time at which Pulse() will next be called.
  - Added a muscleCompare template that returns -1 if the first arg
    is greater than the second, or 0 if they are equal, or else 1. 
  - Added an Atoull() function to turn an ASCII string into a uint64.
    (useful since atoll() and atoull() aren't standard functions)
  - Added a SendMessageToMatchingSessions() convenience method to
    the StorageReflectSession class.
  - Added a dev-c++ subfolder that contains project files suitable
    for compiling muscled under Windows' Dev/C++ IDE.  (Thanks
    to Marcin "Shard" Konicki for supplying these!)
  - Added inline x86 assembly atomic-increment and atomic-decrement
    code to AtomicCounter.h.
  - Added a "remap" argument to muscled, and corresponding accessor
    methods to ReflectServer, to support explicit remapping of IP
    addresses (e.g. so you can tell muscled to advertise local LAN
    machines by their world-accessible IP address)
  * AtomicCounter.h no longer relies on the (non-portable) 
    asm/atomic.h API when compiled under Linux.
  * ParseArgs() now parses argv[0] as well as the others.
  * BeOS/net_server bone-check in FinalizeAsyncConnection() now uses 
    be_roster->IsRunning() if possible for more accurate results on
    systems where BONE has been installed and then disabled.
  * Fixed a bug that would cause an assertion failure if you called
    ReverseItemOrdering() on an empty Queue.
  * StringMatcher's wildcard-to-regex code was overly complicated
    and broken, especially when using the included regex parser (i.e.
    under Windows).  Rewritten to be simpler and work right.
  * When set to a numeric-range pattern like "<0-50>", StringMatcher
    now only considers matches on strings that start with a digit.

v2.19 - Release 7/22/02
  - Added a GetPathClauseString() method to PathMatcher.{cpp.h}.
    This version returns a String object containing just the one
    clause you specified.
  * GetPathClause() was not returning NULL on failure.  Fixed.
  * When presented with an unknown hostname, MessageTransceiverThread
    would sometimes try to connect to IP address 0.0.0.0 instead of 
    failing cleanly.  Fixed.
  * The NodeCreated() callback would see the newly created node with
    an empty Message payload.  Now it sees the node complete with the
    Message it was created to have.
  * The Win32 implementation of Thread::StartInternalThreadAux() wasn't
    handling the return value of CreateThread(), which in turn caused
    Thread::ShutdownInternalThread() to not work properly.  Fixed.
    (Thanks to VitViper for detecting this bug!)
  * The BeOS/net_server implementation of FinalizeAsyncConnection()
    would cause net_server to half-close the connection after 60 
    seconds if no send or receive activity had occurred by then.  Fixed.

v2.18 - Released 7/4/02
  - Removed checks for DISABLE_MUSCLE_MEMORY_TRACKING, and put in
    checks for MUSCLE_ENABLE_MEMORY_TRACKING instead.  In other words,
    memory tracking is now disabled unless the Makefile says otherwise.  
    The muscled Makefile contains -DMUSCLE_ENABLE_MEMORY_TRACKING, so
    memory tracking is enabled by default for muscled.
  - Added two GetNumInstancesOf() methods to the String class; these
    are handy for counting how many instances of a substring are
    present in a String.
  - DefaultConsoleLogger now calls fflush() after every call to printf().
  - Added a Reverse() method to the String class.
  - Added a muscleInRange() function template to MuscleSupport.h
    This function tests whether a given value is within a given range.
  * The 'maxmem' argument is no longer parsed if muscled was compiled
    without -DMUSCLE_ENABLE_MEMORY_TRACKING.
  * The '==' operator of the Message class had a bug in which
    Messages would sometimes be wrongly reported as equivalent 
    when they weren't.  Fixed.
  * Message class now holds its fields using a table of GenericRefs 
    instead of AbstractDataArrayRefs (to avoid errors under compilers
    that don't like creating templates for declared-but-undefined classes)
  * The MemoryAllocator class hierarchy has been rewritten so that it
    no longer allocates or frees memory directly; rather it is used only
    to monitor and/or veto memory requests called in by the new and delete 
    operators.  This makes it work better with the constructors and
    destructors of static objects, and fixes a crash-on-exit bug in
    muscled.
  * Folded in Charlie Buckheit's SGI compatibility changes into the
    muscled Makefile, made the Makefile simpler, and added comments.

v2.17 - Release 6/14/02
  - Message class now uses ObjectPools to cache extra AbstractDataArray
    objects, to avoid having to dynamically allocate them most of the 
    time.  You can define MUSCLE_DISABLE_MESSAGE_FIELD_POOLS to suppress 
    this behaviour, if you need to.
  - AtomicCounter now uses inline assembly to implement atomic operations
    on the PowerPC processor with gcc, and the asm/atomic.h functions when 
    under Linux/Intel.  
  - Added '==' and '!=' operators to the Message class.
  - Modified Head() and Tail() in the Queue class to return read-only
    or read-write references to the head or tail items, instead of
    doing return-by-value.
  - Added PeekNextFieldNameString() and GetNextFieldNameString() methods
    to the MessageFieldNameIterator class.  These return a (const String *)
    instead of a (const char *), which is sometimes more efficient.
  * MessageFieldNameIterator::PeekNextFieldNameString() was broken.  Fixed.
  * AtomicCounter::AtomicIncrement() and RefCountable::IncrementRefCount()
    now return void instead of bool (Linux doesn't support returning bool)

v2.16 - Released 6/5/02
  - Added SetNewInputPolicy(), SetNewOutputPolicy(), and
    RemoveSessions() methods to the MessageTransceiverThread class.
    These methods allow for some on-the-fly control of existing
    ThreadWorkerSessions.
  - Added comparison operators (less than, greater than, etc)
    to the Tuple class template.  These do a lexical comparison
    using the comparison operators of each sub-element, in sequence.
  - syslog/SysLog.h now looks for a MUSCLE_MINIMALIST_LOGGING
    preprocessor constant.  If found, Log(), LogTime(), and LogFlush()
    will be defined as simple in-line pass-throughs to printf().
    This allows small programs to use MUSCLE classes without having
    to link in all the stuff that the regular logging facility 
    requires.
  - Added GetKeyAt() and IndexOfKey() methods to the Hashtable class.
  - Added two Substring() convenience methods to the String class,
    that take a String as an argument.
  - Added a GetNumInstancesOf() method to the Tuple class.
  * To ensure logical correctness, all methods in the Hashtable class 
    that used to return (Key *) now return (const Key *).
  * Folded in VitViper's Visual C++ compatibility fixes.

v2.15 - Released 5/17/02
  - The Hashtable class now uses a HashFunctor template argument
    to calculate hash codes, instead of a function callback.  This
    allows for more efficient code, but will break some source 
    code (sorry!).  To fix the souce, you typically just need to 
    remove the function pointer argument to the Hashtable ctor.
  - Broke out the log-line-label-generation code in SysLog.cpp
    into its own separate function, GetStandardLogLinePreamble(),
    so that it can be accessed independently by other code.
  - Changed the Hashtable class's performance parameters to
    capacity=11, loadFactor=75%.  This should save some memory.
  - Added an AfterMessageReceivedFromGateway() callback method 
    to the AbstractReflectSession class.  PushSubscriptionMessages()
    is now called by this method, rather than having to be
    called manually by the subclasses.
  - Added a CallMessageReceivedFromGateway() method to the
    AbstractReflectSession class.  This method calls both
    MessageReceivedFromGateway() and AfterMessageReceivedFromGateway(),
    and should be used to 'fake' message reception (instead of
    calling the aforementioned methods directly).
  - Optimized the PushSubscriptions() method with a dirty-flag.
  - Added the muscleCopyIn() and muscleCopyOut() templates to
    MuscleSupport.h.  These support alignment-safe value copying.
  - Added a GetEmptyMessage() utility function to Message.{cpp,h}
  - ObjectPool now derives from AbstractObjectManager, which in 
    turn derives from AbstractObjectGenerator and AbstractObjectRecycler.
    This helps me use pools polymorphically.
  * The ServerComponent detach/delete sequence is now better defined, 
    avoiding possible errors that could occur in custom servers.
  * A little more OS/X compatibility tweaking.
  * Some of the Flatten/Unflatten code would crash on processors 
    (e.g. MIPS) that required values to be read on written on 
    word-aligned boundaries.  Fixed.  (Thanks to Charlie Buckheit 
    for reporting this bug)
  * Fixed a race condition in the Thread class that would cause
    the thread's owner to not be signalled correctly in some cases.

v2.14 - Released 5/2/02
  * The Python Message implementation now flattens/unflattens
    B_INT64_TYPE fields properly even under old (pre 2.2) versions
    of Python.
  * Bryan Varner found and fixed a bug in the Java Message class; 
    it wasn't handling the sending and receiving of UTF8 strings 
    correctly.  Thanks Bryan!
  * Removed the B_POINTER_TYPE from the Java Message implementation,
    since Java doesn't have pointers, and flattening a pointer into
    a Message that goes across the network is a silly thing to do
    anyway.
  * Changed all instances of #include <winsock2.h> to
    #include <winsock.h>, since Muscle does not require any 
    WinSock2-specific features.
  * The included fall-back regex library is now Henry Spencer's 
    public domain implementation, instead of the GPL'd GNU version.
  * The Windows version of Thread::StartInternalThread() was broken.
    Thanks to VitViper for finding and fixing this bug!

v2.13 - Released 4/26/02
  - Added Python support, with Message and MessageTransceiverThread
    classes, and pythonchat, a BeShare-compatible command-line
    demo chat app.  Check out the README.TXT file in the python 
    subfolder for details.
  - Added a readmessage.cpp utility to the test folder.
  - Added |= and &= operators to the Rect class.
  - StorageReflectSession methods NodeChanged(), NodeIndexChanged(),
    and NodeCreated() are now declared as virtual.
  * String::Trim() would crash with an assertion failure on some
    systems, due to incorrect handling of unsigned values.  Thanks
    to Austin M. Brower (a.k.a. bobman) for catching this bug!
  * Tweaked the Makefiles and the SetupSystem.cpp file so that they
    compile properly under OS/X.  (thanks again to Austin for this)
  * Fixed some problems that kept muscled from compiling under VC++.
  * Added a couple of checks to Message::Unflatten() to keep it from
    crashing if given a mangled flattened-Message to parse.

v2.12 - Released 4/4/02
  - Added a SetAboutToFlattenCallback() method to the MessageIOGateway
    class.  This allows you to install a hook that gets called when
    a Message is about to be flattened, in which you can modify or
    inspect the Message.
  - gcc now compiles muscled with the -fno-exceptions flag, resulting
    in somewhat more efficient code since muscle doesn't use exceptions 
    anyway.
  - Added a muscleClamp() utility function to MuscleSupport.h.
  - Added << and >> operators to the Tuple declaration macros.
  - Removed the default/blank member items from the Tuple, Queue,
    and Hashtable classes, as I finally found a way to declare them
    properly on the stack instead.  This should save some memory.
  * Snooze64() and GetCurrentTime64() were broken under Windows.  Fixed.
  * Added a MUSCLE_MAX_OUTPUT_CHUNK #ifdef into ReflectServer.cpp, so
    that people with finicky routers can limit their send-chunk sizes
    by putting a -D flag into their Makefile if necessary.
  o Removed TCPSocketDataIO::PollSocketReadiness(), since it is never
    used, encourages polling, and causes warnings under C++Builder5.5.

v2.11 - Release 2/28/02
  - Added RemoveDataNodes() and DoRemoveData() convenience methods
    to the StorageReflectSession API.
  - Changed the Thread class to have separate 
    SetOkayToCloseInternalThreadWakeupSocket() and
    SetOkayToCloseOwnerWakeupSocket() methods, instead of passing
    in a "release" flag with the Get*WakeupSocket() calls.  Also changed
    the Thread class to keep the socket values even when they are 
    considered "released", so that signalling will still work if needed.
  * ThreadSupervisorSession::MessageReceivedFromOwner()'s argument list
    was missing a parameter, and thus it wasn't getting called.  Fixed.

v2.10 - Released 2/7/02
  - MUSCLE now supports compilation under Win32 using Borland's 
    C++Builder 5.5 compiler.  (use the Makefile in the 'borland' folder)
  - StringMatcher can now (as a special case) do simple integer range 
    queries of the form "<15-252>", which would match strings.
    "15", "16", ..., "252".  See StringMatcher::SetPattern() for details.
  - Added RemoveFirstInstanceOf() and RemoveLastInstanceOf() methods
    to the Queue class.
  - Added ByteBuffer and FlatCountable classes to the util folder.
  - Added AddFlat(FlatCountableRef), FindFlat(FlatCountableRef), and 
    friends to the Message class.  These allow you to add and retrieve
    FlatCountable objects to/from a Message by reference,
    so that they aren't actually flattened until the Message itself is.
  - Rewrote the Message class to use ByteBufferRefs instead of raw
    byte arrays for its flattened objects and raw data buffers.
    Note that this changes the semantics of these fields slightly--
    copying a Message object will no longer copy the contents of these
    fields, but rather the two Messages will now both reference the 
    same data.
  - Pointer fields in Messages are no longer flattened, as the mechanics
    of doing so are non-portable (and silly).
  - All methods in the Message class now take String references instead
    of (const char *)'s for field names.
  - Removed all but one of the Message::GetInfo() methods, since they
    were redundant and/or inconsistent with the rest of the Message API.
  - Moved the "okayToAdd" parameter of the Replace*() methods in the
    Message class to the front of the argument list.  (It was causing 
    some nasty problems involving type promotion at its previous position)
  - class ObjectPool now derives from an interface class named
    AbstractObjectRecycler.  Also, the Ref class now holds a pointer to
    an AbstractObjectRecycler, rather than to an ObjectPool.  This allows
    more flexibility when keeping heterogeneous sets of objects referenced.
  - Added optional CopyTo() and CopyFrom() methods to the Flattenable class.  
    These methods support copying one Flattenable object to another in the 
    most efficient way possible.  Per-class optimizations can be implemented 
    by overriding the CopyToImplementation() and CopyFromImplementation()
    virtual methods as desired..
  * Default implementation of Flattenable::AllowsTypeCode() now accepts
    B_RAW_TYPE as well as TypeCode(), to allow unflattening from untyped data.
  * Removed the (char) constructor from the String class, as it was
    interfering with proper type checking of arguments.
  * Changed all index parameters in the Message class to use uint32
    instead of int32 (since negative indices don't make sense).
  * MessageTransceiverThread wasn't adding new sessions asynchronously
    (i.e. after StartInternalThread() had been called).  Fixed.
  * MessageTransceiverThread would not deliver a
    MTT_EVENT_SESSION_DISCONNECTED message to the user code if an
    asynchronous connection to localhost failed.  Fixed.
  * FinalizeAsyncConnect() was using the wrong test and thus sometimes
    thought an asynchronous connection had succeeded when it had in
    fact failed.  Fixed.
  * ConnectAsync() was broken under Windows.  Fixed.

v2.00 - Released 1/19/02
  - All MUSCLE code is now declared as being in the 'muscle' namespace.
    This, plus all the changes listed below, pretty much guarantee that
    any source code that compilable with previous versions of MUSCLE won't
    compile now, and vice versa; sorry about that.  Hopefully everything
    that needed changing has been changed by now though, so it shouldn't
    happen again (well, not soon anyway ;^)).  If you need help updating
    your old MUSCLE-using code, let me know.
  - muscled now parses a 'maxmessagesize' argument, allowing you to limit the
    maximum size of incoming Message objects (so e.g. you don't have to worry 
    about some joker sending you 100 megabyte Messages, tying up all your RAM)
  - muscled now parses 'maxsessions' and 'maxsessionsperhost' keywords to allow
    limiting of the number of simultaneous connections, or simultaneous
    connections from any given client IP address.
  - muscled now accepts a 'localhost' keyword which lets you specify what
    the advertised IP address of clients connecting from localhost should be, 
    instead of (the rather useless) 127.0.0.1.
  - muscle now accepts the keywords "maxsendrate", "maxreceiverate", and 
    "maxcombinedrate" -- these allow you to specify maximum allowed 
    bandwidth usage (in KB/sec) for sending, receiving, or both.
  - muscled now accepts a 'require' keyword on the command line as well
    as 'ban', allowing for 'whitelisting' as well as 'blacklisting'.
  - admin now parses 'require' and 'unrequire' keywords on the command line.
  - Removed the word 'Portable' from all class names that had it; since 
    muscle is now in its own namespace, a unique prefix is no longer necessary.
  - Completely rewrote the MessageTransceiverThread class.  Now the
    MessageTransceiverThread class is portable code, with optional thin
    OS-specific wrapper subclasses available if you wish to use them.  
    Moreover, MessageTransceiverThread now holds its own ReflectServer 
    object, which means that it uses the same event loop as the servers 
    do, and that a single MessageTransceiverThread object can manage multiple 
    incoming and outgoing connections simultaneously.
    BMessageTransceiverThread, QMessageTransceiverThread, and
    AMessageTransceiverThread are the wrappers for BeOS, Qt, and AtheOS,
    respectively.  (MessageTransceiverThread can also be used by itself
    if you prefer to stick with threads-and-TCP only)
  - Split the accept-tcp-sockets-thread functionality into its own
    class, AcceptSocketsThread.  There is also a Qt-specific subclass of
    of this available, named QAcceptSocketsThread.
  - Added a Tuple templated class to the support folder.  This class
    represents an array of numeric values, and is used to do simple 
    vector math operations conveniently.
  - Point and Rect (nee PortablePoint and PortableRect) are now derived from 
    Tuple, to avoid code duplication.  The formerly public member variables
    x, y, left, top, right, and bottom values are now exposed as
    inline methods instead (e.g. use x() instead of x).
  - Added aggregate bandwidth metering/management capabilities to MUSCLE.
    This includes the introduction of a new interface, AbstractSessionIOPolicy,
    and a bandwidth-limiter subclass, RateLimitSessionIOPolicy.  
  - Added a SetMaxIncomingMessageSize() method to the MessageIOGateway class.
  - Added a FilterSessionFactory decorator class, that can be used
    in conjunction with any other ReflectSessionFactory object to enforce
    ban-lists, require-lists, and/or connection limits.  
  - ReflectSessionFactory and AbstractReflectSession now have a common base
    class, named ServerComponent, that provides them with limited access to 
    their ReflectServer object.
  - Added SetLocalHostIPOverride() and GetLocalHostIPOverride() functions
    to NetworkUtilityFunctions.h, to set a custom IP address to use instead
    of 127.0.0.1 when necessary.
  - Added -= and - operators to the String class.  (you saw it here first!)
  - Added a String constructor and assignment operator for char arg.
  - Renamed ObjectPool::GetObject() to ObtainObject() to avoid a naming
    conflict with a #define in the MS-Windoze headers.  (evil!)
  - ObjectPool class is now thread-safe by default (unless you specify
    -DMUSCLE_SINGLE_THREAD_ONLY in your build line)
  - Added a new subfolder named "system", which contains code for exporting
    OS-specified functionality in a platform-independent manner.  This folder
    currently holds a Mutex class and a Thread class, both of which 
    wrap the relevant portions of several supported native APIs:  
    BeOS, AtheOS, pthreads, Qt, and Win32.  It also holds the 
    new MessageTransceiverThread and AcceptSocketsThread classes, since
    these are special types of Thread, and the GlobalMemoryAllocator.
  - Moved the memory-usage-tracking code out of ReflectServer.cpp and into
    its own file, system/GlobalMemoryAllocator.{cpp,h}.  Now you can choose
    whether or not to link this in to your server.
  - Added util/MemoryAllocator.{cpp,h}.  These files contain a set of
    memory-allocation-handler classes, which can be composed together to
    create a custom memory allocation strategy.  Included subclasses include
    BasicMemoryAllocator, ProxyMemoryAllocator, UsageLimitMemoryAllocator,
    and AutoCleanupMemoryAllocator.
  - Merged PortableTypeConstants.h, PortableTypeDefs.h, PortableByteOrder.h,
    PortableMacros.h, and PortableStatusConstants.h into a single file 
    called MuscleSupport.h
  - Renamed the BeOS and AtheOS conversion routines to ConvertToBMessage(),
    ConvertFromBMessage(), ConvertToAMessage(), and ConvertFromAMessage().
  - Added a RawDataMessageIOGateway class to the iogateway folder.  This
    class is handy for reading or writing chunks of unformatted bytes  
    to/from a socket.
  - AbstractMessageIOGateway::DoInput() and DoOutput() now return the number  
    of bytes that they read/wrote (respectively), or -1 if there was an error.
    (Before they returned a status_t).  They now take a uint32 argument
    instead of a (uint32 &).  The argument now indicates the maximum number 
    of bytes they are allowed to read or write before returning.
  - Added an InsertOrderedData() method into StorageReflectSession so
    that subclasses can get more info about what gets inserted where.
  - Added new methods to the Message class:  AddTag(), PrependTag(),
    FindTag(), and ReplaceTag().  These let you assign non-persistent,
    non-flattenable tag objects to a message that will be automatically 
    dereferenced when the Message goes away.
  - ReflectSessionFactory classes are now in charge of deciding who
    gets to connect and who doesn't, rather than the StorageReflectSession
    class.  This is useful because it means you can specify different
    access policies for different ports.
  - Removed AbstractReflectSession::GetClientPort() and replaced
    it with the (slightly more useful) GetPort() method, which returns
    the session's port number on the server side, instead.
  - Added AbstractReflectSession::SendMessageToFactory(), and
    ReflectSessionFactory::MessageReceivedFromSession(), so that
    sessions can send instructions to the factories that created them.
  - ReflectSessionFactory::CreateSession() now takes the IP string
    of the remote peer, to allow for filtering on IP addresses.
  - CreateAcceptingSocket() now takes optional arguments to return the 
    selected port, and to specify an IP address to only accept from.
  - Added ConnectAsync(), FinalizeAsyncConnect(), GetHostByName(), 
    CloseSocket(), Accept(), and Inet_AtoN() functions into the 
    NetworkUtilityFunctions toolkit.  Also added a version of Connect() that 
    takes a numeric IP address rather than an ASCII string.
  - INet_NtoA() now returns a String instead of writing into a char buffer.
  - Added support for sessions that asynchronously connect outwards from
    the server:  ReflectServer::AddNewConnectSession(), 
    AbstractReflectSession::AddNewConnectSession(), and 
    the callback AbstractReflectSession::AsyncConnectCompleted().
  - Added SaveNodeTreeToMessage() and RestoreNodeTreeFromMessage()
    methods to StorageReflectSession.  These allow easy recursive
    archiving and restoration of database node subtrees and their indices.
  - Made a bunch of formerly protected members of StorageReflectSession
    private, and added protected accessors for some of them, where necessary.
  - Added sort-by-value capability to the Hashtable class, and rewrote the
    auto-sort interface so that there are separate SetKeyCompareFunction(),
    SetValueCompareFunction(), and SetCompareCookie() methods, as well as 
    associated accessor methods.
  - Added Message::GetNumValuesInName().
  - GetMessageFromPool() now returns a MessageRef instead of a Message *,
    to avoid any possibility of a memory leak.
  - Added templated convenience functions muscleSwap(), muscleMin(), and
    muscleMax() to MuscleSupport.h.
  - Added a Shutdown() method to the AbstractMessageIOGateway interface,
    and made AbstractMessageIOGateway::GetDataIO() protected.
  - Added a GetSelectSocket() method to the DataIO interface.  This method
    returns the socket fd to select() on for that DataIO (if any).
  - Removed AbstractMessageIOGateway::SetEnabled() and IsEnabled(), and
    replaced them with the single virtual method IsReadyForInput(), which
    function similarly to HasBytesForOutput().
  - Consolidated the server-side Pulse logic into a single base class,
    PulseNode.  ReflectServers, AbstractMessageIOGateways,
    ReflectSessionFactories, and AbstractReflectSessions now all inherit from 
    PulseNode, and thus are all capable of scheduling and receiving Pulse()   
    calls for themselves.
    Also renamed ReschedulePulseTime() to InvalidatePulseTime().
  - AbstractDataIOGateway objects no longer take a DataIO pointer in their
    constructor arguments;  instead, a separate SetDataIO(DataIORef) call
    is used to install the DataIO into the gateway.
  - Renamed the constant MUSCLE_NEVER_PULSE to MUSCLE_TIME_NEVER (since
    it is used in situations other than just Pulse() now).
  - Added the constant MUSCLE_NO_LIMIT, which is defined as ((uint32)-1).
  - Separated the DataIO creation from the CreateGateway() callback,
    making CreateGateway() implementations a bit simpler.  Also added
    SetGateway() and GetGateway() methods so you can define a custom
    gateway for your session "in advance" if you want to.
  - Added SetRef(), SetFromGeneric(), and GetGeneric(), conveniences methods
    to the Ref class, as well as a Ref constructor that takes a GenericRef.
  - Renamed AddLogCallback() to PutLogCallback(), and change the arguments
    to take a LogCallbackRef instead of just a pointer.
  - Moved the log callback stuff into its own header file, syslog/LogCallback.h
  - Modified several APIs that were taking a pointer and an "ownIt" boolean 
    to take Refs instead.  That way the deletion can be handled automagically.
  - Removed the InitializeTCPStack() method from NetworkUtilityFunctions and
    added instead some SetupSystem classes, including a ThreadSetupSystem,
    a NetworkSetupSystem, and a CompleteSetupSystem.  Placing one of these
    (usually a CompleteSetupSystem) on the stack at the beginning of main()
    is now the correct way to handle all environment setup and tear-down.
  - Added MiscUtilityFunctions.{cpp,h} files to the util subfolder.  These
    contain utility functions that don't fit in anywhere else--currently
    they contain a ParseArgs() function that parses command line arguments
    into a Message object.
  - Added the SignalMessageIOGateway class -- a very simple gateway used
    primarily as a convenience class for thread synchronization.
  - Renamed MessageReceivedFromNeighbor() to MessageReceivedFromSession(),
    and renamed BroadcastMessageToNeighbors() to BroadcastMessageToSessions().
  - Added MessageReceivedFromFactory() and BroadcastMessageToFactory()
    methods to the ServerComponent class and its subclasses.
  - Added util/SocketHolder.h, to facilitate leak-proof socket file descriptor
    transfers via Message objects.
  - merged testreflectclient.cpp and testatheosclient.cpp into a single program,
    and got rid of testplaintextclient.cpp
  * Renamed Queue::CountItems() to GetNumItems(), and renamed Hashtable::Size()
    to GetNumItems(), for clarity and consistency.
  * Renamed all methods named MakeEmpty() to Clear(), for consistency.
  * functions in the SysLog API are now serialized in order to be thread-safe.
  * Removed the UnintrusiveRef class, as it isn't useful enough to keep around.
  * Fixed a bug in the PlainTextMessageIOGateway that would sometimes
    allow garbage characters into the imported text.
  * All TCP port number arguments are now specified as uint16s instead of ints.
  * All usages of size_t and ssize_t have been replaced with 
    uint32 and int32, respectively (since that is more explicit/precise).
  * Removed the MUSCLE_CLASS_DECLARATIONS and MUSCLE_FUNCTION_DECLARATIONS
    tokens from the headers, since they didn't have a well-defined meaning.
  * Certain MUSCLE methods were using a non-standard convention of returning
    a boolean value to indicate success or failure.  Modified all of the
    following methods to return a status_t (B_NO_ERROR or B_ERROR) instead:
       HashtableIterator::GetNextKey() HashtableIterator::PeekNextKey()
       HashtableIterator::GetNextValue() HashtableIterator::PeekNextValue()
       Hashtable::Get Hashtable::Put() Hashtable::Remove Hashtable::RemoveAux()
       Hashtable::GrowTable() Hashtable::MoveToFront() Hashtable::MoveToBack()
       Hashtable::MoveToBefore() Hashtable::MoveToBehind() Hashtable::Sort()
       Queue::AddTail() Queue::AddHead() Queue::RemoveTail() Queue::RemoveHead()
       Queue::RemoveItemAt() Queue::GetItemAt() Queue::ReplaceItemAt()
       Queue::InsertItemAt() Queue::EnsureSize()
       AbstractMessageIOGateway::EnsureBufferSize()
       Message::GetNextFieldName() Message::PeekNextFieldName()
       StorageReflectSession::DataNode::PutChild()
       StorageReflectSession::DataNode::InsertOrderedChild()
       StorageReflectSession::DataNode::ReorderChild()
       StorageReflectSession::DataNode::RemoveIndexEntry()
       StringMatcher::SetPattern() Flattenable::ReadData()

v1.93 - Released 12/05/01
  - Added an optional second argument to PortableHashtable::GetIterator(), 
    that lets you traverse the hashtable's contents backwards.
  - Added PortableHashtable::GetIteratorAt(), to allow iterations
    that start from any item in the table's traversal list.
  - Changed the compare function type for hash tables to return an int 
    (strcmp() style) rather than a bool (== style), so that it can be used
    for sorting as well as comparison.  Also added a (void *) cookie parameter
    so that the callback can access user-defined context information easily.
  - Changed PortableHashtable::SetCompareFunction() to take a second parameter
    specifying whether or not the compare function should be used to auto-sort
    entries as they are placed into the hash table.
  - Added Sort() and Sort(compareFunc) methods to PortableHashtable to allow
    in-place traversal order sorting.
  - Added the PR_COMMAND_REORDERDATA message type, to let clients reorder their
    indices without having to delete and reupload the associated data nodes.

v1.92 - Released 11/23/01
  - PortableHashtables now retain the ordering of the items you Put() into them.
    (And since PortableMessage uses a PortableHashtable internally, this means 
     also that PortableMessage now retains the ordering of the data fields you 
     add to it)
  - Added MoveToFront(), MoveToBack(), MoveToBefore(), and MoveToBehind()
    methods to the PortableHashtable class.  These methods allow the user
    to modify the iteration traversal order.
  - It is now possible to modify a PortableHashtable in the middle of
    traversing its contents with a PortableHashtableIterator, without causing
    an assertion failure or even messing up the traversal(!).
  - Renamed PortableHashtable::Contains() to ContainsValue(), to avoid 
    confusion.
  - Rewrote PortableHashtableFieldNameIterator to be simpler and more efficient.
  - Rewrote ReflectServer to use only a PortableHashtable to hold 
    AbstractReflectSessionRefs, instead of both a PortableHashtable and a 
    PortableQueue.  
  - Renamed ReflectServer::GetSessionsList() and 
    AbstractReflectSession::GetSessionsList() to GetSessions(), which now 
    returns a hashtable iterator instead of a reference to a PortableQueue.
  - Renamed ReflectServer::GetSessionByID() and 
    AbstractReflectSession::GetSessionByID() to GetSession(), which now 
    returns an AbstractReflectSessionRef instead of a status_t.
  - Added a +(char) operator to PortableString class.
  - Made the non-session-specific server API access methods in 
    AbstractReflectSession protected, instead of public.
  - Added a SwapContents() method to the PortableHashtable class.
  * Fixed the GrowTable() method -- the user compare function wasn't
    being retained.
  
v1.91 - Released 11/01/01
  - Added atomic inc/decs for Linux and Windows into PortableRefCount.h
  - The admin tool now waits for a response from the server, and informs you
    if your admin commands failed due to a privilege violation.
  - Changed GetPeerInfo() to try and find out what the local host's "real"
    IP address is if necessary, instead of returning 127.0.0.1.
  - moved the signal(SIGHUP, SIG_IGN) code into InitializeTCPStack().
  * Integrated Vitaliy's patches to get QMessageTransceiverThread to work
    under Windows.

v1.90 - Released 10/26/01
  - Changed the PortableRefCount class to require that the items it 
    reference-counts are subclasses of PortableRefCountable.  This has the 
    advantage of removing all the RefCountMem and RefCountMemPool dependencies; 
    unfortunately it also breaks most of the MUSCLE-using code out there 
    (slightly).  The old PortableRefCount implementation is now called 
    UnintrusivePortableRefCount, and is left in for use in cases where the
    reference-counted class cannot be modified to derive from 
    PortableRefCountable.
  - Added a StorageReflectSession::CloneDataNodeSubtree() convenience method.
  - Added a CreateAcceptingSocket() function to NetworkUtilityFunctions.  This 
    function creates and returns a socket that is listening for incoming TCP 
    connections on the given port.
  - Added a Flush() callback method to the LogCallback class, and a LogFlush() 
    global function, so that SysLog output can be fflush()'d in a generic 
    manner.
  - Added support for defining a custom threadsafe incrementor function in 
    PortableRefCount.h
  - Added #define PR_NAME_SESSION "session" into StorageReflectConstants.  
    Now when muscled sees a string with this field name in a client-to-client 
    PortableMessage, it will replace the string value with the sending client's 
    session ID.  This allows receiving clients to be sure that the client who 
    sent them the message is the client indicated in the server field of the 
    message (i.e. it disallows "spoofing" of other clients).
  - Added an example flattened-PortableMessage byte listing to the end of
    PortableMessageIOGateway.h
  - Added AddHead() and AddTail() methods to PortableQueue that take
    other PortableQueues, rather than individual items.
  - QMessageTransceiverThread::PortableMessageReceived()'s second argument
    is now a uint32 instead of an int.
  - Added the InitializeTCPStack() function to NetworkUtilityFunctions.h
    (Starts up the TCP stack;  only needed under Windows)
  - Added handy factory functions for the PortableMessageIOGateway and
    PlainTextMessageIOGateway classes.
  - Added the LogLineCallback convenience subclass to SysLog.{cpp,h}
  - Added Vitaliy's vc++ subfolder with VC++ project files.
  * More windows compatibility tweaks; muscled now compiles and runs under
    Windows XP with VC++! (many thanks to Vitaliy Mikitchenko aka VitViper!)
  * StorageReflectSession::NodePathMatcher::DoTraversal() was not giving 
    correct results for traversals that used multiple query strings and
    didn't start from the global database root.  Fixed.

v1.84 - Released 10/15/01
  - Added a SpawnDaemonProcess() function to NetworkUtilityFunctions.h
  - Added a Snooze64() function to NetworkUtilityFunctions.h
  - Added ReleaseFile() and GetFile() methods to FileDataIO.h
  - Added a PR_NAME_SET_QUIETLY tag so you can upload nodes to
    the database without causing subscribers to be notified.
  - Added a PR_NAME_REMOVE_QUIETLY tag so you can remove nodes from
    the database without causing subscribers to be notified.
  - Added Jonathon Padfield's QSocketDataIO class to the qtsupport
    folder (for single-threaded Qt programs).  Thanks, Jonathan!
  - Added a MCHECKPOINT macro to PortableMacros.h for use in debugging.
  - Added a RemoveAllInstancesOf(const ItemType &) method to the 
    PortableQueue class.
  - Added == and != operators to the PortableQueue class.
  - testgateway.cpp now takes optional filename arguments.  Any
    filenames given to it will be read as flattened PortableMessages
    and their contents printed to stdout.
  - Added a OnceEvery(uint64, uint64 &) function to TimeUtilityFunctions.h
  - PortableMessage::PrintToStream() now has optional arguments to make
    it function recursively with varying levels of indentation.
  - Added a new class regex/PathMatcher.{cpp,h} to the repertoire.
    This class can be used to do efficient pattern matching against
    node-path strings.  Moved the functions in 
    reflector/StorageReflectUtils.{cpp,h} into these files instead.
  - Previously subscribing to a string you were already subscribed to
    was a no-op.  Now it is equivalent to a PR_COMMAND_GETDATA using 
    that string.
  - PortableQueue::Sort() now takes an optional void pointer that will
    be passed through to the item-compare callback function.
  * Jonathon Padfield contributed a patch to PortableByteOrder.h to
    make it compile under FreeBSD.  Thanks again J  :^)
  * PortableRef class now has a proper copy-constructor.
  * Changed B_ERROR and B_NO_ERROR declarations from an enumeration
    to #defines, to avoid compiler warnings.
  * Fixed a bug in QMessageTransceiverThread that would cause 
    TCP connections to be broken as soon as they were connected.
  * TCPSocketDataIO::Shutdown() now calls shutdown() before close().
    (Linux wasn't being properly punctual with just close())
  * PortableString::Unflatten() now checks to make sure the
    flattened string is terminated, and errors out if it isn't.
  * PortableHashtable::Put()'s default value for the last argument
    was false instead of NULL.  Fixed.
  * Made several methods in StorageReflectSession inline and const tagged.

v1.83 - Released 9/12/01
  - Added a qtsupport folder, containing QMessageTransceiverThread
    and QThreadSafeObjectPool classes for use with the Qt API.
  - Added more of David Rene's Visual C++ compatibility changes in.
  - Renamed GetCurrentTime() to GetCurrentTime64() to avoid a
    conflict with the like-named Windows function, and added
    David's Win32 implementation of the method.
  - Added MUSCLE_CLASS_DECLARATIONS and MUSCLE_FUNCTION_DECLARATIONS
    tokens into the header files where appropriate.  These tokens
    are #defined to nothing by default, but can be overridden by the
    compile environment (-D flag) if necessary.
  - Added an "okayToAdd" argument to all the Replace*() methods 
    in the PortableMessage class; if set to true, then attempting 
    to replace a non-existing item will cause the new item
    to be added to the message instead of returning B_NO_ERROR.
    If set false, the old behaviour (fail if old item not present)
    is used instead.
  - Added a Reset() method to the MessageTransceiverThread classes.
    You can call Reset() on a MessageTransceiverThread object to
    re-initialize its state (comparable to deleting the 
    MessageTransceiverThread object and creating a new one)
  - Added GetOutputStallLimit() methods to the AbstractMessageIOGateway,
    PortableDataIO, and TCPSocketDataIO classes.  Now output stall
    detection is only done on TCP connections, and can be controlled 
    per gateway or per data io type.
  - Changed the ReflectServer to take a ReflectSessionFactory object 
    in PutAcceptPort() instead of a callback function.  Converted all session
    creation callback functions into ReflectSessionFactory subclasses.
  - Added an overloaded () operator to the StringTokenizer class, as
    a convenience.  It works as a synonym for GetNextToken().
    
v1.82 - Released 8/21/01
  - During a memory shortage, muscled now kicks users whose output
    message queues have grown too large.  This keeps someone with
    a bad network connection and an ambitious subscription request
    from tying up all the memory on the server indefinitely.
  - Changed the signature of AbstractMessageIOGateway::DoInput() and 
    AbstractMessageIOGateway::DoOutput() to DoInput(uint32 & addReadBytes)
    and DoOutput(uint32 & addWroteBytes).  DoInput() and DoOutput()
    should add to this argument the number of bytes they read or 
    wrote during the call, respectively.  This helps the calling 
    code know when I/O is stalled.
  - muscled now keeps track of how long an output has been "stalled"
    (i.e. it has bytes queued to send to the client but none have 
    actually been sent) and will drop any clients that have been 
    stalled for more than 20 minutes.

v1.81 - Released 7/16/01
  - Added Alan's stream operators ("<<") to the PortableString class.
  * Made AtheOS refcounts use atomic_add(), for thread safety.
  * Merged in David Rene's header tweaks to help MUSCLE code compile
    cleanly under Visual C++.
  * Tweaked time.h includes to compile properly under Debian Linux.
  * Messages being returned to the global message pool now have
    their 'what' code set to zero.
  * Fixed a potential source of problems during out-of-memory
    conditions in the PortableMessageIOGateway class.

v1.80 - Released 6/26/01
  - Added an atheossupport directory, which is a AtheOS port of
    the BeOS code in the besupport directory.
  - Added testatheosclient.cpp and testatheossupport.cpp testing
    stubs to the test folder.
  * Consolidated the netutil, string, stringtokenizer, hashtable,
    refcount, pool, and queue subfolders into a single subfolder
    named 'util'.  All code that uses MUSCLE will probably need 
    to have its #include lines modified to reflect this, before
    it will compile again.  :^(  (this change was necessary in 
    order to avoid #include space conflicts with the STL headers)

v1.72 - Released 6/22/01
  - Added a "maxnodespersession" parameter to muscled, which lets
    you specify the maximum number of nodes any given session may
    have in its server-side database at one time.
  - Added a uint32 PR_NAME_MAX_NODES_PER_SESSION read-only parameter
    to the parameter set returned by PR_COMMAND_GET_PARAMETERS.
    This returns the value mentioned above.
  - Made some of the members of the DataNode class demand-allocated,
    so as to use a little less memory.
  - Tweaked the code to compile without errors under the CygWin environment.
    (thanks to Joshua Schmiedlin for his help with this)
  - Added a Sort() method to the PortableQueue class.  This method
    uses a nice in-place merge-sort algorithm that I liberated from
    Thomas Baudel's sorting visualizer applet at 
    http://www-ihm.lri.fr/~thomas/VisuTri/
  - Added Swap() and ReverseItemOrdering() methods to PortableQueue.
    These let you swap two entries or a invert the ordering of a
    whole range of entries, respectively.
  - ReflectServer now preallocates 256 slots for the lame-duck session 
    list, so that adding a session to the lest is less likely to fail 
    during a memory pinch.
  - Added a SetNotificationMessage() method to MessageTransceiverThread
    class (in case the regular old PORTABLE_MESSAGES_RECEIVED message
    isn't good enough for you)

v1.71 - Released 6/11/01
  - Renamed ReflectServer::AddAcceptPort() to PutAcceptPort().  
    Changed ReflectServer to allocate accept-sockets inside the
    PutAcceptPort() call instead of at the beginning of the 
    ServerEventLoop().  Also added a RemoveAcceptPort() method to
    ReflectServer, and added PutAcceptPort() and RemoveAcceptPort() 
    pass-through methods to AbstractReflectSession.
  - Added a BroadcastToAllNeighbors() convenience method to
    the AbstractReflectSession class.
  - Added a Seek() method to the PortableDataIO interface, and
    Seek() implementations to the various subclasses thereof.
    Moved FileDescriptorDataIO's implementation into a .cpp file 
    so that it will link properly under Linux.
  * Added some missing constants to StorageReflectSession.java

v1.70 - Released 5/20/01
  - Changed the Makefiles to reflect the changed, final location 
    of the BONE headers (/boot/develop/headers/be/bone)
  - Changed the Put() methods of PortableHashtable to return
    true on success, false on error (memory allocation failure).
    NOTE:  This changes the Put()'s return value semantics!
    If you code was relying on them, you will need to modify it.
  - Changed ReflectServer::ServerProcessLoop() to take no arguments,
    and added a method ReflectServer::AddAcceptPort(func, port) instead.
    This change allows a single server to accept connections on multiple
    ports if it wants to, and create different AbstractReflectSession objects
    based on the port the TCP connection was received on.  As a consequence
    of this, you can now have muscled listen on multiple ports if you like;
    e.g. muscled port=2960 port=4000 port=9999
  - Added a GetServerUptime() method to the ReflectServer and
    AbstractReflectSession classes, and a PR_NAME_SERVER_UPTIME
    field to the message returned by PR_COMMAND_GET_PARAMETERS.
    The value returned is muscled's uptime, in microseconds.
  * Changed the AddLogCallback() and AddOutOfMemoryHandler() functions
    to return B_ERROR on out-of-memory.
  * Changed the muscled code to handle Put() failing a little better.
    This should fix some of the memory leaks that occur when the server
    has hit its memory cap.

v1.64 - Released 5/07/01
  - Added dataio/MemoryBufferDataIO.h.  This class lets you use
    an in-memory array as a limited input or output device.
  - Added a new first parameter to BecomeDaemonProcess().  This
    first param lets you specify the directory that the child
    process should chdir() to.  Leave as NULL to not change directory at all.
  - Added a GetReadByteTimeStamp() method to the PortableDataIO
    interface.  (used to support high-precision time-stamping in LCS-specific
    subclasses.   Not implemented by any of the included MUSCLE classes, though)
  - Added a PR_COMMAND_BATCH message type.  When the server receives
    this message, it will parse the submessages in the PR_NAME_KEYS
    field and execute them in order as if they had arrived separately.
  - Added a PR_COMMAND_NOOP message types.  When the server receives
    this message it is guaranteed to do nothing at all with it.
  - In the StorageReflectSession class, changed NotifySubscribersOfNewNode(),
    NotifySubscribersThatNodeChanged(), and 
    NotifySubscribersThatNodeIndexChanged() to be virtual so that they can be 
    overridden and used as hooks in a subclass.
  - Added a CreateConnectedSocketPair() function to the 
    NetworkUtilityFunctions.h package.  This function is useful 
    for thread coordination.
  - Added a SetSocketBlockingEnabled() function to NetworkUtilityFunctions.h
  - muscled now compiles and runs under AtheOS, thanks to a 
    patch submitted by Jonas Sundstrom.
  * The docs were referring to the muscled's pattern matching
    feature as 'regular expressions'.  This was inaccurate, as
    muscled doesn't parse regular expressions so much as wildcard
    expressions, a.k.a. globbing.  Changed the docs to reflect this.
  * PortableString::LastIndexOf(char) was broken.  Fixed.
  * Boolean PortableMessage fields were broken on architectures
    where sizeof(bool) was not equal to one.  Fixed.

v1.63 - Released 3/25/01
  - iogateway/PlainTextMessageIOGateway.cpp now works.  While not
    used by muscled, this class can be used by other programs for
    easy communication with servers that speak ASCII text (e.g.
    web servers, XML server, e-commerce servers, etc).  See
    PlainTextMessageIOGateway.h for details.
  - Added test/plaintextclient.cpp and test/portableplaintext.cpp.
    These are command line communications test programs, similar
    to testreflectlient.cpp and portablereflectclient.cpp, respectively,
    but using plain text streams rather than flattened PortableMessages.
  - Added a Shutdown() method to the PortableDataIO classes.  This
    method can be used to immediately close the underlying socket/file
    descriptor/whatever, without having to delete the PortableDataIO object.
  - Made AbstractMessageIOGateway::GetDataIO() public.
  - BecomeDaemonProcess() now takes two optional arguments:  the
    first indicates where to redirect stderr and stdout to.  Default 
    value is "/dev/null".  The second indicates whether or not to
    try and create a file if it can't be opened; default is false.
  * When the MessageTransceiverThread gets an I/O error, it now closes
    its connection immediately (by calling GetDataIO()->Shutdown())
    rather than waiting for the user to do it.
  * The muscled ServerProcessLoop() and MessageTransceiverThread now
    both suppress SIGPIPE signals, as these can be raised when sending
    to a remotely-closed socket, killing the thread.

v1.62 - Released 3/2/01
  - Added a PR_NAME_SERVER_VERSION parameter to the parameter set
    returned by the server.  This field contains a string to indicate
    the version of MUSCLE the muscled server was compiled from.
    (Currently the string is "1.62")
  * Several parameter name constants were missing from
    StorageReflectConstants.java.  Added.
  * The clever byte-swapping macros put in for MacOS/X were screwing
    up the byte-ordering for Linux, so I removed them.
  * PortableMessage.java had a call to Vector.add() in it.  Changed it to
    Vector.addElement().
  * Made the _empty Hashtable in PortableMessage.java demand allocated,
    otherwise IE would barf on it.

v1.61 - Released 2/16/01
  - Changed the Pulse()/GetPulseTime() callbacks to use uint64s instead of
    timeval structs--uint64's are much easier to use than timevals.
  - Added a BecomeDaemonProcess() function to NetworkUtilityFunctions.h
    This function calls fork() and all the other incantations necessary to
    convert the current process into a canonical Posix daemon task.
  - muscled now recognizes the parameter 'daemon'.  If specified, muscled
    will detach from the shell and run as a background/daemon task.
  * muscled now parses keywords even if they have no '=' sign/value specified.
  * Changed the SysLog implementation to use separate callbacks for console
    and file logging.  Before it was using the same callback for both, but
    certain versions of Linux crash if I try to re-use a va_list object.

v1.60 - Released 2/1/01
  - Added Java client support to MUSCLE!  (See README-JAVA.txt)
  - Changed header comments to JavaDoc style throughout.
  - Added extra commenting to a lot of previously uncommented header code.
    Now all public and protected methods and member items are documented.
  - The muscle/html/autodoc/genDocs.sh script now calls doxygen instead 
    of PERCEPS.  Doxygen is a very nice autodocumenting program, and a 
    BeOS port can be found on BeBits.
  - Added a muscle.dox config file to the muscle/html/autodoc directory.
  - Added a () operator to the PortableString class so you can say
    myString(), instead of myString.Cstr(), if you want.
  - PortableString methods StartsWith, EndsWith(), EndsWithIgnoreCase(),
    and StartsWithIgnoreCase() now return bool instead of int.
  - The PR_RESULT_PARAMETERS messages returned by the server now include
    uint64 PR_NAME_SERVER_MEM_AVAILABLE, PR_NAME_SERVER_MEM_USED, and
    PR_NAME_SERVER_MEM_MAX fields that indicates how much
    memory the server has available to be allocated by all MUSCLE clients.
  - Added a FileDescriptorDataIO class to the dataio directory.  This
    dataio supports sessions that want to do read() and write() on a
    file descriptor for their I/O.
  * AddFlat(), PrependFlat(), ReplaceFlat(), and FindFlat() will 
    now call their Point, String, or Message counterparts if they 
    are passed a PortablePoint, PortableString, or PortableMessage object.
  * Flattened objects added to a PortableMessage are now filed using
    the field type returned by their TypeCode() member, rather than
    always as B_OBJECT_TYPE.  This will break compatibility with old
    clients that expected B_OBJECT_TYPE flattened objects; sorry about that.
  * Added in some extra tweaks so that MUSCLE will compile under MacOS/X.
  * A bunch of member variables of the AbstractMessageIOGateway class
    were protected when they should have been private.  Changed them
    to private and added protected accessor methods where necessary.
  * HTML-ized the README.TXT file (now named README.html)

v1.51 - Released 1/3/01
  - Added PR_COMMAND_KICK, PR_COMMAND_ADDBANS, and PR_COMMAND_REMOVEBANS
    commands.  Messages of these types instruct the muscle server to
    disconnect other clients, forbid IP addresses from connecting to
    the server, and remove previously added bans, respectively.
    These messages will only be honored if sent by a privileged
    client; otherwise a PR_RESULT_ERRORACCESSDENIED message is returned.
  - muscled now takes "privban=<pattern>", "privunban=<pattern>",
    "privkick=<pattern>", and "privall=<pattern>" arguments, to
    specify which clients are allowed to do kick, ban, or unban ops.
    (if not specified, no clients will be privileged)
  - Added an 'admin' command-line tool to the muscle/server
    directory that lets you manage your server's ban lists
    and/or kick users without having to restart the server.
    Run 'admin help' for args.
  - Made ReflectServer::GetCentralState() public.
  * Removed the ClientConnected() and SetClientConnected()
    callbacks in favor of a more elegant StorageReflectSession
    oriented privileges system.  The new system allows the server
    operator to specify which clients are allowed to kick, ban,
    and unban other clients.
  
v1.50 - Released 12/29/00
  - Loosened up the flattened-PortableMessage protocol specification
    a little bit.  It is now legal to add fields with arbitrary typecodes
    to a PortableMessage, and PortableMessages with fields that have
    arbitrary typecodes may be Unflatten()'d without causing an error.
    This will allow the addition and use of new datatypes without breaking
    backwards compatibility, thus avoiding a repeat of the problems that 
    were caused by adding the B_MIME_TYPE support.
  - support/PortableMacros.h now contains a MUSCLE_VERSION_STRING
    #define, indicating the current version of MUSCLE.  muscled
    will print this version string out on startup if you set
    the display threshold to DEBUG or lower.
  * Tweaked StorageReflectSession.{cpp,h} to get it to compile under
    Red Hat Linux 7.0.

v1.45 - Released 12/22/00
  - Added a GetPeerInfo() function into NetworkUtilityFunctions.{cpp,h}.
    This function returns the remote host IP and port of a connected socket.
  - Added a ClientConnected() virtual method and 
    SetClientConnectedCallbackFunc() method to ReflectServer.  Both of these 
    mechanisms allow connecting clients to be checked before allowing them 
    access to the server.
  - muscled can now accept zero or more ban=<ipaddr> arguments on the command
    line.  Each ban argument specifies an IP address (or wildcard pattern of
    IP addresses) to ban from the server.
  - Added EndServer() methods to the ReflectServer and AbstractReflectSession
    classes.  These allow you to cause muscled to exit in a controlled manner.
  - You can now disable the memory-usage-tracking overloads of new and
    delete by defining the preprocessor symbol DISABLE_MUSCLE_MEMORY_TRACKING 
    for ReflectServer.cpp.
  - muscled's Makefile now supports both optimized and unoptimized builds
    of muscled.  Do "make" for an unoptimized build, or "make optimized"
    for an optimized build.  (Be sure to "make clean" first when switching 
    from one to the other!)
  * Fixed a couple of memory leaks in the PortableHashtable class.
  * Rewrote PortableHashtable::GrowTable() to handle out-of-memory
    conditions correctly.
  * Removed the WATCH_MUSCLE_MEMORY_USAGE macros, since the overloaded
    new and delete operators do the same thing in a more elegant way.
  * Updated the docs slightly to reflect the fact that level one
    server-database nodes are named after the clients' IP addresses,
    not their hostnames.
  * Fixed an uninitialized-pointer problem that could make muscled
    crash while denying a login.

v1.44 - Released 12/21/00
  - Modified PortableHashtable to maintain a linked list of 
    PortableHashtableEntry objects.  This should speed up traversals 
    somewhat, as the PortableHashtableIterator no longer needs to 
    iterate over the empty portions of the table.
  - Merged in Trey Boudreau's changes to support adding fields of
    type B_MIME_TYPE to a PortableMessage.
  - Added IndexOfIgnoreCase() and LastIndexOfIgnoreCase() methods
    to PortableString that take chars instead of (const char *)'s 
    as their second argument.

v1.43 - Released 12/01/00
  - Added a "Custom Servers.html" file to muscle/html.  This file contains
    information on making your own custom MUSCLE server.
  - Changed ObjectPool to reuse items in LIFO order rather than FIFO.
    This may increase cache coherency in some cases.
  - Makefile now compiles muscled with -O3 and -fomit-frame-pointer options
    under gcc, for efficiency.
  - Added SetMessageFlattenCallback() and SetMessageUnflattenCallback()
    methods to the PortableMessageIOGateway class (for when you can't be
    bothered to do proper subclassing ;^))
  - Added ParseLogLevelToken() function to SysLog.h, and added 'display' 
    and 'log' arguments to muscled, so that you can specify how what sort 
    of output you want on the command line.  
    (e.g. "./muscled display=debug log=none")
  - Added more *IgnoreCase() methods to PortableString, and changed
    PortableString::Equals() to return a bool instead of an int.
  - Pulled the timeval utility functions out of NetworkUtilityFunctions.{cpp,h}
    and into their own file, netutil/TimeUtilityFunctions.h
    Also declared them all inline, so you don't need to link anything
    extra in to use them.
  - Moved references to <sys/time.h> into PortableTypeDefs.h, and added
    a #include there so that including this header can be avoided.
    (This is to support certain embedded architectures which don't 
    seem have this file...)
  - Added a operator() overload to the PortableRefCount(), so you can
    now specify myRef() instead of myRef.GetItemPointer().
  * Renamed the LOG_* constants in SysLog.h to MUSCLE_LOG_*, to avoid
    conflicts with the constants in Be's support/syslog.h header.  (This
    may break some existing code, sorry about that)
  * Disabled the memory-allocation code under BeOS/PowerPC environments,
    as it was causing mysterious crashes (possible compiler bug?).  This
    means that if you are running muscled on a PowerPC BeOS machine, the
    memory allocation limits will be ignored.

v1.42 - Released 10/18/00
  - Added a new function, AddOutOfMemoryHandler((void *)()).  This lets you
    install your own handler that will be called in the event of a memory
    allocation failure.
  - Added a new command code, PR_COMMAND_PING.  When muscled receives a message
    of this type from its client, changes the message's 'what' code to
    PR_RESULT_PONG, and sends the message right back to the client.
  - Added a GetRemainderOfString() method to the StringTokenizer class.
  * Moved the StorageReflectSession::DrainPools() call out of ReflectServer.cpp,
    and into a callback that is installed by muscled.cpp.  This allows custom
    servers to be compiled without having to link in StorageReflectSession.o.
  * The memory-tracking new and delete operators now count their own 
    4-byte-per-allocation overhead in the allocated-memory total.

v1.41 - Released 10/8/00
  - Added a FindDataPointer() method to the PortableMessage class.
    This method returns a writable pointer to a field's data
    array, for efficiency.
  - PortableMessage::AddData() now allows the (data) parameter to 
    be NULL.  If (data) is NULL, default-constructed objects or 
    uninitialized data bytes will be added to the PortableMessage.
  - PortableMessage::FindData() and FindDataPointer() now allow
    the (numBytes) parameter to be NULL.
  - muscled now parses command line arguments of the form
    keyword=value.  Currently supported keywords are 'port',
    'help', and 'maxmem'.
  - muscled now detects out-of-memory situations and tries to free up 
    some memory by draining the object pools and/or forcibly 
    disconnecting the active session when an out-of-memory error occurs.
  - muscled now lets you specify the maximum number of bytes of
    data it should allow itself to have allocated at any one time.
    For example, entering "muscled maxmem=15" will cause muscled
    to not help itself to more than 15 megabytes of memory.  
  * Went through the code and made it more resistant to crashing
    in out-of-memory situations.  (i.e. it should correctly handle
    NULL being returned by new (nothrow) in all cases)
  * Fixed a bug that would cause muscled to crash if it was
    sent a malformed PortableMessage.  Thanks to Ben and Pete
    for helping me find this bug!
  * Now compiles cleanly with full warnings enabled, thanks
    to Christopher Tate.

v1.40 - Released 9/8/00
  - Added ordered-child-indexing to StorageReflectSession.  Support
    for this includes the new PR_COMMAND_INSERTORDEREDDATA code, 
    the PR_RESULT_INDEXUPDATED result code, and the INDEX_OP_*
    enums.  (see comments in StorageReflectConstants.h and the new
    chapter at the end of the Beginner's Guide for details)
  - Added Prepend*() methods to the PortableMessage class.
  - PortableQueue and PortableString can now handle very small
    strings/lists without having to do any dynamic memory allocation.
  - Added Head(), Tail(), HeadPointer(), TailPointer(), and 
    InsertItemAt() to PortableQueue.

v1.31 - Released 7/30/00
  - Added custom-callback capability to the SysLog module.
    (AddLogCallback(), RemoveLogCallback())
  - Added the OnceEvery() function to NetworkUtilityFunctions.
  * Fixed an uninitialized timeval struct in AbstractMessageIOGateway--
    this was causing muscled to panic and exit sometimes under FreeBSD.
    (Thanks to Peter Schultz for helping track down this bug!)

v1.30 - Released 6/30/00
  - Added optional object-allocation tracking into the code.
    This tracking is useful for hunting down memory leaks;  to enable it
    uncomment the -DMUSCLE_WATCH_MEM_USAGE line in the Makefile and
    recompile the server (from scratch).  With this flag enabled, 
    the server will print out memory-allocation stats every so many 
    seconds.
  - Added some PR_COMMAND_RESERVED and PR_RESULT_RESERVED constants
    to StorageReflectConstants.h to allow future expansion.
  - Added a PR_RESULT_ERRORUNIMPLEMENTED code.  This message is
    sent back to the client when the client sends a PR_COMMAND_RESERVED
    code that the serverd doesn't understand.
  - Added a PR_COMMAND_JETTISONRESULTS command.  When the server receives
    a message of this type, it will match the paths given in PR_NAME_KEYS
    against the items in its list of outgoing PR_RESULTS_DATAITEMS messages, 
    and any matched items will be deleted and not sent.  If no PR_NAME_KEYS 
    field is found in the PR_COMMAND_JETTISONRESULTS message, then all
    pending PR_RESULTS_DATAITEMS messages will be dumped.  (This is useful 
    when a client is receiving a large result set and decides in the middle
    of the download that he's no longer interested in it)
  - muscled no longer does a hostname lookup when a client logs in.
    This speeds up muscled's response time (and frees it from depending
    on a working nameserver) but it means that nodes in level one
    of the database tree will look like '127.0.0.1' instead of
    'mycomputer.mydomain.com'.
  - Added ClientConnectionClosed() callback to the AbstractReflectSession
    class, so that a session can decide whether it wants to stick around
    after its TCP connection is gone.
  - Replaced the AbstractReflectSession class's GetIncomingMessageQueue()
    and GetOutgoingMessageQueue() methods with the more flexible
    GetGateway() and SetGateway() methods.
  - Added some utility functions to StringMatcher.{cpp,h}: 
    IsRegexToken(), HasRegexTokens(), and MakeRegexCaseInsensitive().
  - Now compiles under FreeBSD4.0, using gmake.
  * The StringMatcher wasn't handling parentheses properly.  Fixed it,
    so now you can use expressions like *.(jpg,mp?).  Also rewrote the
    regex translation code to be more readable, and fixed a nasty
    dangling-pointer bug in the process.
  * Changed the RefCountMem class to use atomic_add instead of the
    C preincrement and predecrement operators, so that it can be used
    safely in multithreaded environments.
  * Fixed a subtle bug in the Remove*() methods of the PortableQueue
    class that could cause crashes if you were removing items whose
    assignment operators looked at the PortableQueue they were
    being removed from...  geez
  * Added some missing virtual destructors
  * Rewrote the PortableString class to be more efficient, and
    in the process found and fixed a nasty bug--the CStringHashFunc()
    was completely broken.
  * StringMatcher::Match() is now tagged as const.

v1.24 - 6/17/00
  - muscled now splits its PR_RESULT_DATAITEMS messages into multiple 
    messages if the message has more than 50 items in it.  This allows 
    for more fine-grained updates.
  - Added a PR_NAME_MAX_UPDATE_MESSAGE_ITEMS parameter that can
    be set by the client to change the above threshold if desired.

v1.23 - 6/15/00
  - Added a StartServerThread() method to the MessageTransceiverThread
    class.  Now the MessageTransceiverThread can be used to accept
    multiple overlapping connections, instead of just a series of
    single connections.
  * make clean now removes .xSYM files.

v1.22 - 6/14/00
  * MessageTransceiverThread::WaitForAllMessagesToBeSent() was broken.
    Changed it to use benaphores instead of BLockers, and now all is well.

v1.21 - 6/12/00
  - Added Prepend() and Append() methods to PortableString.
  - Added InetNtoA() convenience method to NetworkUtilityFunctions.cpp
  - Added EscapeRegexTokens() to StorageReflectUtils.h
  * User messages would be reflected back to the sender even when
    the reflect-to-self flag wasn't set.  Fixed.
  * Fixed several bugs in the MessageTransceiverThread class.
  * muscled now handles connections from localhost correctly.

v1.20 - 6/8/00
  - Added new accessors to PortableHashtable and PortableMessage that 
    return key and value objects by pointer rather than by value.  
    This can make access and traversals more efficient, as it eliminates 
    an unnecessary data copy.
  - Added default constructors to the PortableHashtableIterator and 
    PortableMessageFieldNameIterator classes so that you can use 
    them in arrays, as class members, etc.
  - Added SetOutgoingQueueDrainedMessage() to the MessageTransceiverThread 
    API so that you can (optionally) receive notification when the outgoing
    message queue has become empty.
  * Made ObjectPool's destructor virtual. 

v1.10 - 6/1/00
  - Added ReplaceSession() method, by which a server-side session object
    can replace itself with a different one.
  - AbstractMessageIOGateway objects can now request Pulse() callbacks.
  - Added system logging, to the console or to a log file, or both.
  * Fixed some minor compilation problems

v1.01 - 4/11/00
  o Redesigned the Pulse() support to work based on absolute wakeup times
    rather than relative periods.
  - Added some convenience methods for working with timeval structs to
    NetworkUtilityFunctios.h

v1.00 - 3/29/00
  - Initial release
